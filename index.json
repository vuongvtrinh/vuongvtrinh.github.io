[{"authors":null,"categories":null,"content":" #1: Update Hugo #2: Change the baseurl #3: Netlify drag-and-drop #4: Torch public/ #5: Peruse public/ #6: Back to the future    “Just a spoonful of Hugo helps the blog go down.” - me, only somewhat kidding\n In this series, I’m sharing small spoonfuls of Hugo that I have learned that hopefully can help you get your site UP (and even better- more efficient, more streamlined, more automated). You can read the previous posts about my “Spoonful of Hugo” series about Hugo archetypes, Hugo versions, and Hugo page bundles.\nThe following are a few steps that I always start with to troubleshoot any blogdown/Hugo/Netlify problems. These steps would solve what I would anecdotally estimate as ~50% of blogdown problems that I see posted in the GitHub repository and on the community site.\n#1: Update Hugo  Figure 1: Don’t be like this  If things have gone south and you are getting Hugo errors when you use the “Serve Site” Addin locally, it is possible that you need to update your version of Hugo. From R, you can check your Hugo version with blogdown:\nblogdown::hugo_version() Then you can reference your Hugo theme to find the minimum version of Hugo required by your theme:\n Figure 2: Check your theme’s minimum Hugo version  You can go higher than the minimum version though, so it’s good practice to update your Hugo, again from within R:\nblogdown:: update_hugo() Check your version again post-update:\nblogdown::hugo_version() ## [1] \u0026#39;0.54.0\u0026#39; If you are using Netlify to build your site using Hugo, you’ll want this version to match that- the best way to do that is with a netlify.toml file.\n #2: Change the baseurl Open up your config.toml file and look for the baseurl field, usually pretty close to the top. Here is mine1:\nbaseurl = \u0026quot;https://alison.rbind.io\u0026quot; Now if you are just starting with Hugo and don’t actually have a domain name yet, try taking the advice that blogdown automatically prints out for you:\nWarning: You should change the \u0026quot;baseurl\u0026quot; option in config.toml from https://example.org to your actual domain; if you do not have a domain, set \u0026quot;baseurl\u0026quot; to \u0026quot;/\u0026quot; But be careful here- you shouldn’t leave it as “/”- once you do have your domain name you should update the baseurl as “/” is a not a valid URL.\nCare to know more? Here is a quote from the person who writes the Hugo docs:\n “…the only purpose for the baseurl field in the config is to define the full base URL of your website for deployment purposes.” - @rdwatters\n The main error that would happen without the trailing slash in the past is that you would end up with a site where the theme’s CSS would be all wrong. This was probably because the theme designer used code like this buried in a layout file:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ .Site.BaseURL }}css/style.css\u0026quot;/\u0026gt; Now, if you set baseurl = \u0026quot;http://mysite.com\u0026quot; but only rendered locally, things would look just peachy, because the default local server already included the trailing slash. So, the link in the html file would be2:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;http://localhost:1313/css/style.css\u0026quot;\u0026gt; But, at build, the link in the html file would turn into:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;http://mysite.comcss/style.css\u0026quot;\u0026gt; Which creates sites that look like this:\n Figure 3: Hugo tranquil peak theme  GitHub issue #369\n Figure 4: Hugo universal theme  GitHub issue #131\nGitHub issue #114\nHowever, Hugo authors and theme developers have largely been moving towards using relative URLs instead of the baseurl to build paths. This was based on public advice voiced by the Hugo authors on the discourse forum. For example:\n “The recommended way to reference resources is to use either relURL or absURL template funcs, which handles the slash issues.”- @bep\n Following that advice, a more up-to-date theme would have code that looks like this buried in a layout file:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;{{ \u0026quot;css/style.css\u0026quot; | relURL }}\u0026quot;/\u0026gt; →  Bottom line? If your theme uses relURL or absURL to link to site resources like CSS, JavaScript, or static images, then whether or not you include a trailing slash in your baseurl should not matter at all.\nAnd here is some tough love about your theme: if the most recent version does still require the trailing slash in the baseurl to “work” out of the box, I would seriously consider switching themes. This is a pretty good “canary in the coal mine” test regarding how up-to-date the theme author is, and how well the theme you have chosen adheres to Hugo templating best practices. If you are having pain with this now, it is likely not the only thing that will be painful about working with your theme.\n  #3: Netlify drag-and-drop If you can render your site locally but your published site looks different, try the drag-and-drop method:\nUse the “Serve Site” Addin, then drag-and-drop the public/ folder straight into Netlify. What does this do? You can now see your public site…that you built…with your local version of Hugo. Netlify is doing none of the site building here.\nOne of the first benefits of this approach is that it ensures that you are able to actually generate a public/ folder locally! I have seen folks struggle to deploy the wrong repo. This simple step can force you to make sure to use the “Serve Site” Addin to generate the public/ folder, and that the repo you are trying to link to Netlify actually contains a Hugo site because you must physically move the public/ folder. But this method can also help you diagnose other problems too.\nIf your public/ folder does not render on Netlify, you have work to do locally. I can’t tell you what it is as it can be a number of things, but you can be sure that your problem is not just the Netlify build- it is your local build too.\nIf your public/ folder does render perfectly on Netlify, but you are getting a Netlify build error, then you likely have a Hugo version problem. It might be that the version you are running locally is more recent than the version run by Netlify by default to actually build your site. The good news is there is a quick fix for this! The solution is to upgrade the Hugo version Netlify is using- see my advice here for how to do that.\nIf you are happy with how your site looks but you are missing content and/or seeing old deleted content, then you may need the next few strategies to troubleshoot.\n #4: Torch public/ When you are seeing very weird things locally, try deleting your local public/ folder. Then serve site again. Sometimes it can get “junked up”. I’ve found that sometimes deleted content can be a little sticky. As recommended in the blogdown book:\n “you are strongly recommended to delete the /public/ directory before you rebuild the site for publishing every time, because Hugo never deletes it”\n Also, this has a bonus of reinforcing for you exactly what the “Serve Site” Addin does - it regenerates the public/ folder. This is also the folder that, if you are using Netlify to build your site, is in your .gitignore file because Netlify (+ Hugo) generates this file “fresh” with each push to your GitHub repository.\n #5: Peruse public/ When you notice weird things, try actually looking inside public/- don’t be afraid to spelunk around in there! If you are seeing something wrong with your site, try to figure out how blogdown/Hugo is processing and rendering your content. This folder can tell you a lot! Keep in mind that your local public/ folder will still contain future/draft/expired content if you used the “Serve Site” Addin.\n #6: Back to the future  Figure 5: Where are my posts?  If your site renders beautifully locally, and your drag-and-drop site from public/ looks the same, but you are missing key content when you actually deploy to Netlify using a Hugo build, you may have inadvertently stumbled into a Hugo date time warp. This is a fairly common gotcha. Try using the drag-and-drop method again, this time first delete public/, then instead of using the “Serve Site” Addin, run this in your console:\nblogdown::build_site(local = FALSE) Plop this new public folder in Netlify to see what your site will look like when it is actually published. What does this show you? Your local Hugo build (read: your public/ folder generated by “Serve Site”) differs by design in 3 important ways from your deployed site built by Netlify/Hugo. By default, Hugo will not publish:\n Content with a future publishDate value\n Content with draft: true status\n Content with a past expiryDate value\n  You can see that these are defaults. The behavior of the “Serve Site” Addin is also documented in the blogdown book:\n “This is for you to preview draft and future posts locally.”\n Blogdown’s build_site(local = FALSE) differs from the “Serve Site” Addin in that it will not render draft, future, or expired content. So your public/ folder from build_site(local = FALSE) shows you exactly what Netlify should publish. Seeing it can help you troubleshoot why some content was showing up locally but not when you publish.\nThe defaults are pretty sensible and nice to have, as you can still put these kinds of content under version control, and hence collaborate with other team members on the content without having the content publish (or expire) until you say so.\nTo show content that Hugo was hiding, you’ll want to edit some YAML fields in the individual offending content files. For example, in the YAML of an individual content file (like a blog post), if you want to un-draft it, add or change this key/value:\ntitle: \u0026#39;A Spoonful of Hugo: Troubleshooting your Build\u0026#39; author: \u0026quot;Alison Hill\u0026quot; date: \u0026#39;2019-03-04\u0026#39; draft: false Alternatively, if you want to date something in the future (like to advertise the date of an upcoming talk) but publish now, you can use the publishDate field. The publishDate field is a newer addition to Hugo (\u0026gt;= v0.54.0) which, if left unset, will default to the date field, which means in the individual content file YAML you can do:\ntitle: \u0026#39;A Spoonful of Hugo: Get excited!!\u0026#39; author: \u0026quot;Alison Hill\u0026quot; date: \u0026#39;2025-03-04\u0026#39; publishDate: \u0026#39;2019-03-04\u0026#39; Hopefully these 6 things can help you get unstuck. If not, the RStudio community forums are a great place to ask questions!\n  Yes that’s right, I don’t have a trailing slash- read on for why I can get away with this.↩\n https://discourse.gohugo.io/t/how-not-to-specify-url-site/5691/5↩\n   ","date":1551657600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551657600,"objectID":"0ba13389195341f445a9a6be1766a7ec","permalink":"https://vuongvtrinh.github.io/post/2019-03-04-hugo-troubleshooting/","publishdate":"2019-03-04T00:00:00Z","relpermalink":"/post/2019-03-04-hugo-troubleshooting/","section":"post","summary":"A few troubleshooting strategies to save your sanity","tags":null,"title":"A Spoonful of Hugo: Troubleshooting Your Build","type":"post"},{"authors":null,"categories":null,"content":" “Just a spoonful of Hugo helps the blog go down.” - me, only somewhat kidding\n In this series, I’m sharing small spoonfuls of Hugo that I have learned that hopefully can help you get your site UP (and even better- more efficient, more streamlined, more automated). You can read the previous posts about my “Spoonful of Hugo” series about Hugo archetypes and Hugo versions.\nThis is my third post in this series and it is breaking news.\nHugo Page Bundles Well, not really breaking news, but you still may not know about it! Hugo v0.32 introduced a new feature called Page Bundles, as a way to organize the content files. Blogdown users rejoice that Davis Vaughn posted an issue on the rstudio/blogdown repo to enable this option, which Yihui added shortly before rstudio::conf 2019 🎉. Here is the snippet from the NEWS.md:\n “One benefit of using a page bundle instead of a normal page is that you can put resource files associated with the post (such as images) under the same directory of the post itself. This means you no longer have to put them under the static/ directory, which has been quite confusing to Hugo beginners.”\n What does a blogdown/Hugo site begin to look like without page bundles? I think here is a representative example from tidyverse.org (sorry tidyverse team- it’s not you, it’s the old Hugo).\nFor this team, they need an image for every post, which gets out of control pretty fast. Also, some ended up in static/ too, organized by post (which I have done on my own blog, though not well or consistently).\nWhat would it look like to use page bundles?\ncontent/ ├── about │ ├── index.md ├── posts │ ├── 2015-07-23-hi-world │ │ ├── bakers.csv │ │ ├── image1.jpg │ │ ├── image2.png │ │ └── index.Rmd │ └── 2015-07-24-bye-world │ └── index.Rmd One could call this bundled file structure “tidier” 🍱.\nIn the above, after serving site, index.html files also get added to the bundle. In Hugo’s terms, these are leaf bundles. The resource files allowed in a bundle include page and non-page items like images, pdf, .csv files, etc.\nThis is instead of:\ncontent/ ├── about │ ├── index.md ├── posts │ ├── 2015-07-23-hi-world.Rmd │ ├── bakers.csv │ ├── image1.jpg │ ├── image2.png │ └── 2015-07-24-bye-world.Rmd When you create a new bundled post, the actual content of the post goes in the index file of a page bundle. So:\n# not bundled post post/2015-07-23-hi-world.Rmd # bundled post post/2015-07-24-bye-world/index.Rmd  Bundle Me, blogdown! First, read the previous post on setting up a netlify.toml file. Since using Hugo page bundles depends on Hugo v0.32 or higher, you should go ahead and update hugo then update your netlify.toml with your updated version:\nblogdown::update_hugo() blogdown::hugo_version() Now, let’s use the usethis package.\nProject-specific .Rprofile First, I’m going to demo here how to create a project-specific .Rprofile file- but know that you can do a user-level .Rprofile file too.\n# install.packages(\u0026quot;usethis\u0026quot;) # uncomment this to install usethis::edit_r_profile(scope = \u0026quot;project\u0026quot;) These helpful messages should print to your console: please note the “restart” reminder…\n\u0026gt; usethis::edit_r_profile(scope = \u0026quot;project\u0026quot;) ● Restart R for changes to take effect ✔ Setting active project to \u0026#39;/Users/alison/rprojs/alison.rbind.io\u0026#39; ● Modify \u0026#39;.Rprofile\u0026#39; Now you could add this to your file:\n# in .Rprofile of the website project if (file.exists(\u0026quot;~/.Rprofile\u0026quot;)) { base::sys.source(\u0026quot;~/.Rprofile\u0026quot;, envir = environment()) } options(blogdown.new_bundle = TRUE) The first code chunk above is from the blogdown book, where we describe a workaround for loading both user and project .Rprofile files (since R technically only reads one startup profile file).\nIf you don’t want this, you could add the blogdown options to your user .Rprofile instead using:\nusethis::edit_r_profile(scope = \u0026quot;user\u0026quot;) Heck, while you are at it, you could set a bunch of options to make your blogdown life easier:\n# in .Rprofile of the website project if (file.exists(\u0026quot;~/.Rprofile\u0026quot;)) { base::sys.source(\u0026quot;~/.Rprofile\u0026quot;, envir = environment()) } options( blogdown.author = \u0026quot;Alison Hill\u0026quot;, blogdown.ext = \u0026quot;.Rmd\u0026quot;, blogdown.subdir = \u0026quot;post\u0026quot;, blogdown.yaml.empty = TRUE, blogdown.new_bundle = TRUE, blogdown.title_case = TRUE ) For the blogdown-specific options, any of these prepopulate content in your “New Post” Addin (I told you to use this here). There is a handy table from the blogdown book, summarized here:\n blogdown.author = author of new posts blogdown.ext = default extension of new posts (can also be “.md” or “.Rmarkdown”) blogdown.subdir = theme-specific, you need to know your theme and content folder here blogdown.yaml.empty = I told you to do that here blogdown.new_bundle = what this whole post is about! blogdown.title_case = “nEed More coFFee” –\u0026gt; “Need More Coffee” (it tidies all your post titles to title case)   The Newline Thing Here is a massive .Rprofile gotcha: this file must end with a blank line. So make sure you add an empty line at the end of the file, then save it, and restart your R session.\nWant to make your general R life easier in the future? Follow Yihui’s advice and do this in RStudio to ensure that all source files end with a newline:\n  Use Bundles After restarting R, try using the “New Post” Addin, this time with feeling. There is still one more gotcha though. Use the Addin to create your new bundled post. The only catch is that once you are looking at your exciting new post, you should delete the slug in the YAML (I posted an issue about this here).\nThe reason is that you want the link to your post to be:\nhttp://alison.rbind.io/post/2019-02-21-hugo-page-bundles/\nIf you include the slug, the link to your post will be:\nhttp://alison.rbind.io/post/2019-02-21-hugo-page-bundles/hugo-page-bundles\nAnother option is to update your config.toml file with permalinks like Yihui suggests (but beware: this will change all your past links as well, requiring some Netlify redirects):\n[permalinks] post = \u0026quot;/:year/:month/:day/:slug/\u0026quot; The default here from Hugo was /post/:year-:month-:day-:slug/:slug/.\nA small note: if you want to add relative links from a blog post to another post in your same blog. So [this](/post/2019-02-19-hugo-archetypes/) becomes this.\nNow, add images and data files to your ❤️’s content! But you may want to do one more thing…\n Update Metadata If you are anything like me, you may draft a blog post then come back to it later. For example, I started this post 2 days ago, but want to publish it today, 2019-02-22. The cool thing that was already built-in to blogdown is the “Update Metadata” Addin. With your blog post open (it should be called index.Rmd)1, click on Addins and select “Update Metadata”. You should see a window like this:\nCheck the box to rename the file if the date has changed. RStudio will tell you your file has been deleted- which is technically true since the folder was renamed, but don’t panic!\nClick YES. The index.Rmd file that is now open should have an updated date field in the YAML. In your RStudio file viewer, you may want to click on “content” at this point then navigate back to view your post- then you will then see that the folder name now has an updated date too.\n  If no post is open, you will get an error: Warning message: The current document does not seem to contain YAML metadata↩\n   ","date":1550707200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550707200,"objectID":"57794aaa1dd7911236dd044032a33bf8","permalink":"https://vuongvtrinh.github.io/post/2019-02-21-hugo-page-bundles/","publishdate":"2019-02-21T00:00:00Z","relpermalink":"/post/2019-02-21-hugo-page-bundles/","section":"post","summary":"Why (and how) you should use Hugo's new page bundles feature","tags":null,"title":"A Spoonful of Hugo: Page Bundles","type":"post"},{"authors":null,"categories":[],"content":" “Just a spoonful of Hugo helps the blog go down.” - me, only somewhat kidding\n You can read the previous post about my “Spoonful of Hugo” series here. In this series, I’m sharing small spoonfuls of Hugo that I have learned that hopefully can help you get your site UP (and even better- more efficient, more streamlined, more automated).\nThis is my second post in this series, and it is a relatively quick one. Just do this. This one is a no-brainer.\nEdited to update: thanks to Mara Averick for alerting me that with Hugo version 0.54.0 and onward, there is a trailing zero at the end of Hugo versions now. So for versions before 0.54.0, use the format: 0.53; for later versions use 0.54.0 (0.54 will not work).\nUse Netlify to Deploy First, you’ll need to use Netlify! I am a very happy Netlify user and currently have approximately 33 sites deployed. To setup a new account, navigate to Netlify and click on the Sign Up link.\nSign up with GitHub to connect your GitHub and Netlify accounts (as shown below).\nIf you use a different version control service, select GitLab or BitBucket instead.\nThe last step is to use the Netlify UI in browser do New Site from Git \u0026gt; pick your repo. You’ll be prompted to fill in these fields, they are probably already filled in correctly for you:\nThe next part is the advanced build settings:\nSee that pro tip about the netlify.toml? Let’s do that! You can leave these fields as is.\n Why netlify.toml? In their Build Gotchas:\n “If your build works locally, the next debugging step is to ensure the package versions we use to build match yours. You can find the settings for these in the Build Settings doc. That’s the leading cause of build failure.”\n Yes that is right- package version mismatches are the leading cause of build failure with Netlify. What does this look like for blogdown users? This means that you are running a version of Hugo locally that doesn’t match the version that Netlify is using to build your site. Most of the time, you are using a more recent version of Hugo than the one Netlify uses. This means that the files your theme relies on may be using newer Hugo functions that were introduced in later Hugo versions- functions that Netlify won’t be able to find working from an older Hugo version. You’ll get all the build errors.\nYou can check your local Hugo version by running this code in your R console:\nblogdown::hugo_version() ## [1] \u0026#39;0.54.0\u0026#39; Now, we want Netlify to use this same version of Hugo when it builds your site. You can do this two ways:\nDo this in your browser (👎) Do this in your project root directory in a netlify.toml file (👍)   Add the netlify.toml File Adding this file means that team members can see for themselves what version of Hugo you are running- if it is buried in the Netlify UI, you can’t see that information unless you sift through the public build logs (no thanks). Making the file as plain text in the root of your blogdown project directory means that:\n it is version controlled (yay!) and other people who use/learn from/contribute to your blog can actually reproduce your site with the same site configuration. Bonus: you can set the Hugo versions for branch deploys too.  Here is an example from my own netlify.toml file1:\n[build] publish = \u0026quot;public\u0026quot; command = \u0026quot;hugo\u0026quot; [context.production.environment] HUGO_VERSION = \u0026quot;0.54.0\u0026quot; # if older, use format: 0.53 (no trailing zero) HUGO_ENV = \u0026quot;production\u0026quot; HUGO_ENABLEGITINFO = \u0026quot;true\u0026quot; [context.branch-deploy.environment] HUGO_VERSION = \u0026quot;0.54.0\u0026quot; # if older, use format: 0.53 (no trailing zero) You can leave off the last chunk if you don’t want to use branch deploys, but I ❤️ this Netlify feature and encourage you to try it out. I’ve starting drafting individual blog posts and tutorials in branches, and then I can see them rendered and share them for feedback without asking collaborators to clone and build the repository locally. It is lovely. Every branch gets a link 🎉.\nSo add this file to your blogdown site repo and push to GitHub.\nNote that, according to the Netlify docs:\n “During a build, the following ordering determines which context covers a particular deploy: UI settings are overridden if a netlify.toml file is present in the root folder of the repo and there exists a setting for the same property/redirect/header in the toml file.”\n If you look in your site’s Netlify deploy log, you should see entries like this:\n7:47:13 PM: Found netlify.toml. Overriding site configuration 7:47:13 PM: Starting build script 7:47:13 PM: Installing dependencies 7:47:14 PM: Started restoring cached node version 7:47:17 PM: Finished restoring cached node version 7:47:18 PM: v8.15.0 is already installed. 7:47:19 PM: Now using node v8.15.0 (npm v6.4.1) 7:47:19 PM: Attempting ruby version 2.3.6, read from environment 7:47:20 PM: Using ruby version 2.3.6 7:47:20 PM: Using PHP version 5.6 7:47:20 PM: Installing Hugo 0.54.0 Success!\n  the leading zero matters for Hugo versions, so 0.53 works but .53 will not. For versions \u0026gt;= 0.54.0, the trailing zero also matters, so 0.54.0 works but 0.54 will not.↩\n   ","date":1550620800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550620800,"objectID":"8a82d0bfce9f49b7c489323259c476b4","permalink":"https://vuongvtrinh.github.io/post/2019-02-19-hugo-netlify-toml/","publishdate":"2019-02-20T00:00:00Z","relpermalink":"/post/2019-02-19-hugo-netlify-toml/","section":"post","summary":"Why you should use a netlify.toml file in your blogdown site","tags":[],"title":"A Spoonful of Hugo: The netlify.toml File","type":"post"},{"authors":null,"categories":null,"content":" “Just a spoonful of Hugo helps the blog go down.” - me, only somewhat kidding\n As a happy blogdown user, a common story I hear from other #rstats users is that you try to change one little thing in Hugo, and the whole site breaks. Here be dragons for folks who aren’t web developers.\nI’m here to tell you that there are small spoonfuls of Hugo that can help you get your site UP (and even better- more efficient, more streamlined, more automated), even if you are not in the least bit interested in transitioning into a career in web development 😏.\nMy Project The education team at RStudio needs a website and we have a short wishlist:\n We want something we can maintain ourselves, We want to look consistent with other RStudio sites on the outside, and We want to be consistent on the inside so that we can get help if/when we need it.  This led me to the current tidyverse.org blogdown site. I wanted to make a copy of the site then customize for the education team, but I noticed that the source code for the site didn’t make it easy for me to copy the structure of the site and edit only the content of the site. This is one of the real strengths of Hugo, so I embarked on a learning adventure.\n   via GIPHY  As a result, I have been living and breathing Hugo lately. As in, my husband now recognizes Mike Dane’s voice. You may not have have met Mike yet, but he appears in all the video tutorials in the Hugo docs. His screencasts have been really helpful to me, like this one on templating. I’ve also spent a lot of time actually reading the docs (which are pretty good!), reading posts and answers on the Hugo discourse community site, and spelunking around inside the actual source code for two very well structured Hugo sites:\nThe actual Hugo site: https://github.com/gohugoio/hugoDocs The rOpenSci site: https://github.com/ropensci/roweb2  I’ll be using this post and other later posts to share some of the things I’ve learned about Hugo along the way. Mainly breadcrumbs to myself, but I hope these help other people too.\nFor reference, I’m using Hugo via the blogdown R package, and within the RStudio IDE. These are my blogdown and Hugo versions:\npackageVersion(\u0026quot;blogdown\u0026quot;) ## [1] \u0026#39;0.10.5\u0026#39; blogdown::hugo_version() ## [1] \u0026#39;0.54.0\u0026#39;  tl;dr: A Teaspoon of Archetypes Add custom archetypes as .md files to your project root directory (do not touch the archetypes folder in your themes/archetypes folder).  If you don’t have that as an empty folder in your project root, make one, then add your archetype files to it. If you are making a new blogdown site, I recommend using these options to keep your empty directories1:  library(blogdown) new_site(theme = \u0026quot;jpescador/hugo-future-imperfect\u0026quot;, sample = TRUE, theme_example = TRUE, empty_dirs = TRUE, # this! to_yaml = TRUE)  Figure 1: Using the RStudio Project Wizard  Use the “New Post” Addin in RStudio to create any and all new content for your site (not just posts!). Be sure to use the handy dropdown menu to select from all the possible archetypes. Also, careful about the subdirectory here- some themes use blog, others use news, articles, or posts.\n Your archetypes, while only markdown files, can include R code. When you use the Addin, be sure to choose R Markdown (.Rmd) as the format so that you can run the code.  Don’t miss this great blog post by my friend and the great educator Leo Collado-Torres on archetypes.    A Tablespoon of Archetypes One of the easiest things you can do for yourself is customize your site’s archetypes. From the Hugo docs:\n “Archetypes are templates used when creating new content.”\n Right away when I cloned the tidyverse site, I noticed that there were instructions for how to contribute a new article (or blog post) in the README.md and in a separate CONTRIBUTING.md file. Then I noticed this open GitHub issue from Mara Averick (the tidyverse developer advocate) titled “Fix README/CONTRIBUTING so there’s one source of mechanical info?”.\nI also noticed that there was no project root folder called archetypes, which is where you would store your custom site archetype files as .md files. In fact, there is no theme folder as you might expect either, which is where you could view the default theme archetypes. Let’s look at some from other Hugo themes:\nThe default Hugo theme for blogdown, Lithium, has just one archetype: default.md\n--- title: \u0026#39;\u0026#39; date: \u0026#39;\u0026#39; --- In contrast, the Hugo Academic theme has A LOT: https://github.com/gcushen/hugo-academic/tree/master/archetypes; here is the content of the one for new posts:\n+++ title = \u0026quot;{{ replace .Name \u0026quot;-\u0026quot; \u0026quot; \u0026quot; | title }}\u0026quot; subtitle = \u0026quot;\u0026quot; # Add a summary to display on homepage (optional). summary = \u0026quot;\u0026quot; date = {{ .Date }} draft = false # Authors. Comma separated list, e.g. `[\u0026quot;Bob Smith\u0026quot;, \u0026quot;David Jones\u0026quot;]`. authors = [] # Tags and categories # For example, use `tags = []` for no tags, or the form `tags = [\u0026quot;A Tag\u0026quot;, \u0026quot;Another Tag\u0026quot;]` for one or more tags. tags = [] categories = [] # Projects (optional). # Associate this post with one or more of your projects. # Simply enter your project\u0026#39;s folder or file name without extension. # E.g. `projects = [\u0026quot;deep-learning\u0026quot;]` references # `content/project/deep-learning/index.md`. # Otherwise, set `projects = []`. # projects = [\u0026quot;internal-project\u0026quot;] # Featured image # To use, add an image named `featured.jpg/png` to your page\u0026#39;s folder. [image] # Caption (optional) caption = \u0026quot;\u0026quot; # Focal point (optional) # Options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight focal_point = \u0026quot;\u0026quot; +++  A quick note: you may have noticed differences in both the content between these two files but also the structure. The first is a YAML file, the second is a TOML file. For blogdown users, you may want to use YAML. This is also why I recommend when you set up your site to use the to_yaml = TRUE option (in the Project Wizard from figure 1, check the “Convert all metadata to YAML” box; otherwise, the exampleSite will contain TOML instead of YAML)2.\nIf you read the original tidyverse CONTRIBUTING.md file, the instructions include a fair bit of R code that I would guess means a lot of copying and pasting into new posts. For example, the R Markdown setup chunk and the code for using usethis::use_tidy_thanks() for package releases. I studied the contributing guidelines, and parsed three different “kinds” of articles that are commonly contributed, each with a different archetype:\nThe default.md- this is just for plain old markdown posts and basically sets up the YAML of the post to be the same as it is now (currently, there is no archetype dictating the content- it is pulling from a project-level .Rprofile).\n A default-rmarkdown.md which should only be used with an R Markdown post and provides only the setup chunk at the top.\n A package-release.md which also should only be used with an R Markdown post and adds the usethis::use_tidy_thanks() code chunk (this is pseudo-code so the default chunk option is set to eval = FALSE).\n  So I drafted a pull request that adds these three archetypes to the GitHub repository for the tidyverse.org. Here is the “after” Addin view:\nHere’s hoping Hugo archetypes make some things about adding new content to your site easier. There is no Hugo involved, other than realizing that Hugo will look first in your themes/\u0026lt;THEME-NAME\u0026gt;/archetypes/ folder, then in your project root archetypes/ folder next. DO NOT TOUCH any files in your themes/ directory.3\nYou may want to set up archetypes for your blogdown site if you have a “signature” R setup chunk that loads your preferred knitr chunk options, common libraries you always load at setup like tidyverse, ggplot2 themes you prefer (theme_minimal() FTW), etc. This may be especially helpful if you have multiple team members contributing to a single site and you want their posts to have a uniform setup. Then archetypes can be a real time- and sanity-saver. Get more ideas from Leo’s blog post on archetypes. You can also make directory based archetypes if you use Hugo page bundles, which is a topic of a future post.\n  These setup options are newish to the blogdown package: https://github.com/rstudio-education/arm-workshop-rsc2019/issues/8↩\n If you end up with TOML in your content files, run this R code: hugo_convert(to = \u0026quot;YAML\u0026quot;, unsafe = TRUE)↩\n Trust me on this one- if you ever want to update your site this will make that process way harder.↩\n   ","date":1550534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550534400,"objectID":"a160260aa45ac1699baf5f119b4c4e60","permalink":"https://vuongvtrinh.github.io/post/2019-02-19-hugo-archetypes/","publishdate":"2019-02-19T00:00:00Z","relpermalink":"/post/2019-02-19-hugo-archetypes/","section":"post","summary":"Why you should use Hugo archetypes in your blogdown site","tags":null,"title":"A Spoonful of Hugo: Archetypes","type":"post"},{"authors":null,"categories":["R"],"content":"A shorter version of this blog post now appears as an article vignette for the readxl package, thank you to Jenny Bryan for the invitation!\n A problem I run up against a lot when working with other people’s data is having multiple header rows in the source data file. I like to use readr functions to read in rectangular data like .csv and .tsv files, but if you skip rows at import using the skip argument, you lose the header row as well, which usually has column names. The problem I often have is that the header row has column names that I want to keep, but I’d like to skip the second row (or more), which has some junk in it. Usually this row is some kind of data dictionary inserted between the row of column names and the actual data.\nIn this post, I’ll walk through a solution to this problem, using the readr package. You can also watch along in the video.\n  Warning!: I made a mistake when I said readr uses the first 100 rows of your data to predict column types- it uses the first 1000 rows.\n Download stickers.csv Being sticker rich This dataset is from an article published in PLOS ONE called “Being Sticker Rich: Numerical Context Influences Children’s Sharing Behavior”. In this study, children (ages 3–11) received a small (12, “sticker poor”) or large (30, “sticker rich”) number of stickers, and were then given the opportunity to share their windfall with either one or multiple anonymous recipients. This type of experimental design is a version of the Dictator Game.\nThe main research questions the authors explored were: do the number of available resources and/or the number of potential recipients alter the likelihood of a child donating and/or the amount they donate? But, in order to answer this question, we have to be able to read in the data! Luckily, these lovely developmental psychologists opted to share their data on the Harvard Dataverse as a tab-delimited file.\nIf you download the file, you can open it up in a plain text editor. You can also open it with Microsoft Excel.  Read in the file Let’s start by creating a variable called link to store the link to the data file.\n# create variable to store url link \u0026lt;- \u0026quot;https://dataverse.harvard.edu/api/access/datafile/2712105\u0026quot; The file has a .tab extension, so we know it is tab-delimited. This means that the right readr function for reading this file is read_tsv. Since we stored our link already as a character string, that is the only argument to the read_tsv function.\n#install.packages(\u0026quot;readr\u0026quot;) library(readr) # load the readr package stickers \u0026lt;- read_tsv(link) # spec() Now, we know the second row of data is wonky, but how can we see that in R? There are a number of ways we can go spelunking around into our data file. The easiest to print it. Since we used readr, we have a tibble, which nicely prints to screen.\nstickers # # A tibble: 402 x 18 # SubjectNumber Condition NumberStickers NumberEnvelopes Gender Agemonths # \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; # 1 [Included Sa… 1=12:1; … 1=12; 2=30 1=1 recipient;… 1=fem… NA # 2 1 1 1 1 1 36 # 3 2 1 1 1 2 36 # 4 3 1 1 1 2 36 # 5 4 1 1 1 1 36 # 6 5 1 1 1 2 36 # 7 6 1 1 1 2 36 # 8 7 2 1 2 1 36 # 9 8 2 1 2 2 36 # 10 9 3 2 1 2 36 # # ... with 392 more rows, and 12 more variables: Ageyears \u0026lt;dbl\u0026gt;, # # Agegroups \u0026lt;chr\u0026gt;, `Subject\u0026#39;sEnvelope` \u0026lt;chr\u0026gt;, LeftEnvelope \u0026lt;chr\u0026gt;, # # RightEnvelope \u0026lt;chr\u0026gt;, # # `absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)` \u0026lt;chr\u0026gt;, # # `PercentGiven(Outof100percent)` \u0026lt;chr\u0026gt;, Giveornot \u0026lt;chr\u0026gt;, # # LargerEnvelopeabs \u0026lt;chr\u0026gt;, LargeEnvelopepercent \u0026lt;chr\u0026gt;, # # SmallerEnvelopeabs \u0026lt;chr\u0026gt;, SmallEnvelopepercent \u0026lt;chr\u0026gt; Unfortunately, dplyr::glimpse can’t help us much, because we have one variable name that is ridiculously long (absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)). We’ll fix that with dplyr::rename.\nlibrary(dplyr) glimpse(stickers) # Observations: 402 # Variables: 18 # $ SubjectNumber \u0026lt;chr\u0026gt; ... # $ Condition \u0026lt;chr\u0026gt; ... # $ NumberStickers \u0026lt;chr\u0026gt; ... # $ NumberEnvelopes \u0026lt;chr\u0026gt; ... # $ Gender \u0026lt;chr\u0026gt; ... # $ Agemonths \u0026lt;dbl\u0026gt; ... # $ Ageyears \u0026lt;dbl\u0026gt; ... # $ Agegroups \u0026lt;chr\u0026gt; ... # $ `Subject\u0026#39;sEnvelope` \u0026lt;chr\u0026gt; ... # $ LeftEnvelope \u0026lt;chr\u0026gt; ... # $ RightEnvelope \u0026lt;chr\u0026gt; ... # $ `absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)` \u0026lt;chr\u0026gt; ... # $ `PercentGiven(Outof100percent)` \u0026lt;chr\u0026gt; ... # $ Giveornot \u0026lt;chr\u0026gt; ... # $ LargerEnvelopeabs \u0026lt;chr\u0026gt; ... # $ LargeEnvelopepercent \u0026lt;chr\u0026gt; ... # $ SmallerEnvelopeabs \u0026lt;chr\u0026gt; ... # $ SmallEnvelopepercent \u0026lt;chr\u0026gt; ... More options:\nhead(stickers) # # A tibble: 6 x 18 # SubjectNumber Condition NumberStickers NumberEnvelopes Gender Agemonths # \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; # 1 [Included Sa… 1=12:1; … 1=12; 2=30 1=1 recipient;… 1=fem… NA # 2 1 1 1 1 1 36 # 3 2 1 1 1 2 36 # 4 3 1 1 1 2 36 # 5 4 1 1 1 1 36 # 6 5 1 1 1 2 36 # # ... with 12 more variables: Ageyears \u0026lt;dbl\u0026gt;, Agegroups \u0026lt;chr\u0026gt;, # # `Subject\u0026#39;sEnvelope` \u0026lt;chr\u0026gt;, LeftEnvelope \u0026lt;chr\u0026gt;, RightEnvelope \u0026lt;chr\u0026gt;, # # `absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)` \u0026lt;chr\u0026gt;, # # `PercentGiven(Outof100percent)` \u0026lt;chr\u0026gt;, Giveornot \u0026lt;chr\u0026gt;, # # LargerEnvelopeabs \u0026lt;chr\u0026gt;, LargeEnvelopepercent \u0026lt;chr\u0026gt;, # # SmallerEnvelopeabs \u0026lt;chr\u0026gt;, SmallEnvelopepercent \u0026lt;chr\u0026gt; tail(stickers) # # A tibble: 6 x 18 # SubjectNumber Condition NumberStickers NumberEnvelopes Gender Agemonths # \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; # 1 396 1 1 1 2 136 # 2 397 4 2 2 1 136 # 3 398 1 1 1 1 137 # 4 399 1 1 1 2 137 # 5 400 4 2 2 2 139 # 6 401 3 2 1 1 143 # # ... with 12 more variables: Ageyears \u0026lt;dbl\u0026gt;, Agegroups \u0026lt;chr\u0026gt;, # # `Subject\u0026#39;sEnvelope` \u0026lt;chr\u0026gt;, LeftEnvelope \u0026lt;chr\u0026gt;, RightEnvelope \u0026lt;chr\u0026gt;, # # `absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)` \u0026lt;chr\u0026gt;, # # `PercentGiven(Outof100percent)` \u0026lt;chr\u0026gt;, Giveornot \u0026lt;chr\u0026gt;, # # LargerEnvelopeabs \u0026lt;chr\u0026gt;, LargeEnvelopepercent \u0026lt;chr\u0026gt;, # # SmallerEnvelopeabs \u0026lt;chr\u0026gt;, SmallEnvelopepercent \u0026lt;chr\u0026gt; names(stickers) # [1] \u0026quot;SubjectNumber\u0026quot; # [2] \u0026quot;Condition\u0026quot; # [3] \u0026quot;NumberStickers\u0026quot; # [4] \u0026quot;NumberEnvelopes\u0026quot; # [5] \u0026quot;Gender\u0026quot; # [6] \u0026quot;Agemonths\u0026quot; # [7] \u0026quot;Ageyears\u0026quot; # [8] \u0026quot;Agegroups\u0026quot; # [9] \u0026quot;Subject\u0026#39;sEnvelope\u0026quot; # [10] \u0026quot;LeftEnvelope\u0026quot; # [11] \u0026quot;RightEnvelope\u0026quot; # [12] \u0026quot;absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)\u0026quot; # [13] \u0026quot;PercentGiven(Outof100percent)\u0026quot; # [14] \u0026quot;Giveornot\u0026quot; # [15] \u0026quot;LargerEnvelopeabs\u0026quot; # [16] \u0026quot;LargeEnvelopepercent\u0026quot; # [17] \u0026quot;SmallerEnvelopeabs\u0026quot; # [18] \u0026quot;SmallEnvelopepercent\u0026quot; # View() Now we are ready to diagnose the problem!\nProblem: the first row is not really data. It is metadata about the variables, and it is screwing up readr’s ability to predict our column types.\nSolution: we’ll use readr and the read_tsv() function to read in the data twice. In Step 1, we’ll create a character vector of the column names only. In Step 2, we’ll read in the actual data and skip the multiple header rows at the top. When we do this, we lose the column names, so we use the character vector of column names we created in Step 1 instead.\n Read in the file (again) Step 1 Goal: we want to read in the first row only and save it as a character vector called sticker_names. This row contains the correct column names that we’ll need in Step 2.\nsticker_names \u0026lt;- link %\u0026gt;% read_tsv(n_max = 0) %\u0026gt;% # default: col_names = TRUE rename(stickersgiven = \u0026#39;absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)\u0026#39;) %\u0026gt;% names() sticker_names # [1] \u0026quot;SubjectNumber\u0026quot; \u0026quot;Condition\u0026quot; # [3] \u0026quot;NumberStickers\u0026quot; \u0026quot;NumberEnvelopes\u0026quot; # [5] \u0026quot;Gender\u0026quot; \u0026quot;Agemonths\u0026quot; # [7] \u0026quot;Ageyears\u0026quot; \u0026quot;Agegroups\u0026quot; # [9] \u0026quot;Subject\u0026#39;sEnvelope\u0026quot; \u0026quot;LeftEnvelope\u0026quot; # [11] \u0026quot;RightEnvelope\u0026quot; \u0026quot;stickersgiven\u0026quot; # [13] \u0026quot;PercentGiven(Outof100percent)\u0026quot; \u0026quot;Giveornot\u0026quot; # [15] \u0026quot;LargerEnvelopeabs\u0026quot; \u0026quot;LargeEnvelopepercent\u0026quot; # [17] \u0026quot;SmallerEnvelopeabs\u0026quot; \u0026quot;SmallEnvelopepercent\u0026quot; glimpse(sticker_names) # chr [1:18] \u0026quot;SubjectNumber\u0026quot; \u0026quot;Condition\u0026quot; \u0026quot;NumberStickers\u0026quot; ...  Step 2 Goal: we want to read in all the rows except for the first two rows, which contained the variable names and variable descriptions. We want to save this as stickers, and set the column names to the sticker_names object we created in Step 1.\nstickers \u0026lt;- link %\u0026gt;% read_tsv(skip = 2, col_names = sticker_names) glimpse(stickers) # Observations: 401 # Variables: 18 # $ SubjectNumber \u0026lt;int\u0026gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,... # $ Condition \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, ... # $ NumberStickers \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, ... # $ NumberEnvelopes \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, ... # $ Gender \u0026lt;int\u0026gt; 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, ... # $ Agemonths \u0026lt;dbl\u0026gt; 36, 36, 36, 36, 36, 36, 36, 36... # $ Ageyears \u0026lt;dbl\u0026gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ... # $ Agegroups \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... # $ `Subject\u0026#39;sEnvelope` \u0026lt;int\u0026gt; 7, 12, 4, 7, 12, 8, 8, 11, 26,... # $ LeftEnvelope \u0026lt;int\u0026gt; 5, 0, 8, 5, 0, 4, 2, 1, 4, 0, ... # $ RightEnvelope \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, 2, 0, ... # $ stickersgiven \u0026lt;int\u0026gt; 5, 0, 8, 5, 0, 4, 4, 1, 4, 0, ... # $ `PercentGiven(Outof100percent)` \u0026lt;dbl\u0026gt; 0.42, 0.00, 0.67, 0.42, 0.00, ... # $ Giveornot \u0026lt;int\u0026gt; 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, ... # $ LargerEnvelopeabs \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, 2, 1, ... # $ LargeEnvelopepercent \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, 0.5000... # $ SmallerEnvelopeabs \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, 2, 0, ... # $ SmallEnvelopepercent \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, 0.5000...   Fin! All together now: the final solution!\n# load packages library(readr) library(dplyr) # create variable to store url link \u0026lt;- \u0026quot;https://dataverse.harvard.edu/api/access/datafile/2712105\u0026quot; # read in column names only sticker_names \u0026lt;- link %\u0026gt;% read_tsv(n_max = 0) %\u0026gt;% # default: col_names = TRUE rename(stickersgiven = \u0026#39;absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)\u0026#39;) %\u0026gt;% names() # read in data, set column names stickers \u0026lt;- link %\u0026gt;% read_tsv(skip = 2, col_names = sticker_names)  Addendum For good measure, I would add a final step to everything above and use janitor::clean_names() to put all the variable names into snake case. So my final final solution is here:\n# load packages library(readr) library(dplyr) library(janitor) # create variable to store url link \u0026lt;- \u0026quot;https://dataverse.harvard.edu/api/access/datafile/2712105\u0026quot; # read in column names only sticker_names \u0026lt;- link %\u0026gt;% read_tsv(n_max = 0) %\u0026gt;% # default: col_names = TRUE rename(stickersgiven = \u0026#39;absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)\u0026#39;) %\u0026gt;% names() # read in data, set column names stickers \u0026lt;- link %\u0026gt;% read_tsv(skip = 2, col_names = sticker_names) %\u0026gt;% clean_names() stickers # # A tibble: 401 x 18 # subject_number condition number_stickers number_envelopes gender # \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; # 1 1 1 1 1 1 # 2 2 1 1 1 2 # 3 3 1 1 1 2 # 4 4 1 1 1 1 # 5 5 1 1 1 2 # 6 6 1 1 1 2 # 7 7 2 1 2 1 # 8 8 2 1 2 2 # 9 9 3 2 1 2 # 10 10 3 2 1 2 # # ... with 391 more rows, and 13 more variables: agemonths \u0026lt;dbl\u0026gt;, # # ageyears \u0026lt;dbl\u0026gt;, agegroups \u0026lt;int\u0026gt;, subjects_envelope \u0026lt;int\u0026gt;, # # left_envelope \u0026lt;int\u0026gt;, right_envelope \u0026lt;int\u0026gt;, stickersgiven \u0026lt;int\u0026gt;, # # percent_given_outof100percent \u0026lt;dbl\u0026gt;, giveornot \u0026lt;int\u0026gt;, # # larger_envelopeabs \u0026lt;int\u0026gt;, large_envelopepercent \u0026lt;dbl\u0026gt;, # # smaller_envelopeabs \u0026lt;int\u0026gt;, small_envelopepercent \u0026lt;dbl\u0026gt; glimpse(stickers) # Observations: 401 # Variables: 18 # $ subject_number \u0026lt;int\u0026gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1... # $ condition \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3,... # $ number_stickers \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2,... # $ number_envelopes \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,... # $ gender \u0026lt;int\u0026gt; 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2,... # $ agemonths \u0026lt;dbl\u0026gt; 36, 36, 36, 36, 36, 36, 36, 36, ... # $ ageyears \u0026lt;dbl\u0026gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,... # $ agegroups \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... # $ subjects_envelope \u0026lt;int\u0026gt; 7, 12, 4, 7, 12, 8, 8, 11, 26, 3... # $ left_envelope \u0026lt;int\u0026gt; 5, 0, 8, 5, 0, 4, 2, 1, 4, 0, 18... # $ right_envelope \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, 2, 0, NA... # $ stickersgiven \u0026lt;int\u0026gt; 5, 0, 8, 5, 0, 4, 4, 1, 4, 0, 18... # $ percent_given_outof100percent \u0026lt;dbl\u0026gt; 0.42, 0.00, 0.67, 0.42, 0.00, 0.... # $ giveornot \u0026lt;int\u0026gt; 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1,... # $ larger_envelopeabs \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, 2, 1, NA... # $ large_envelopepercent \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, 0.500000... # $ smaller_envelopeabs \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, 2, 0, NA... # $ small_envelopepercent \u0026lt;dbl\u0026gt; NA, NA, NA, NA, NA, NA, 0.500000...  Bonus data dictionary As an extra bonus, when you do have extra header rows, you can create a data dictionary using the gather() function from the tidyr package.\nlibrary(tidyr) stickers_dict \u0026lt;- read_tsv(link, n_max = 1) %\u0026gt;% rename(stickersgiven = \u0026#39;absolutenumberofstickersgiven(Conditions1or3:Outof12;Conditions2or4:Outof30)\u0026#39;) %\u0026gt;% clean_names() %\u0026gt;% gather(variable_name, variable_description) stickers_dict # # A tibble: 18 x 2 # variable_name variable_description # \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; # 1 subject_number [Included Sample Only] # 2 condition 1=12:1; 2=12:2, 3=30:1, 4=30:2 # 3 number_stickers 1=12; 2=30 # 4 number_envelopes 1=1 recipient; 2=2 recipients # 5 gender 1=female; 2=male # 6 agemonths \u0026lt;NA\u0026gt; # 7 ageyears \u0026lt;NA\u0026gt; # 8 agegroups 1=3-4yrs; 2=5-6yrs; 3=7-8yrs; 4=9-11yrs # 9 subjects_envelope How many stickers did the child keep for themse… # 10 left_envelope 1 recipient conditions: How many stickers the s… # 11 right_envelope 1 recipient conditions: N/A; 2 recipient condit… # 12 stickersgiven Regardless of condition, the number of stickers… # 13 percent_given_outof100… Regardless of condition, the proportion of stic… # 14 giveornot 1=Donated 1 or more stickers to the recipient(s… # 15 larger_envelopeabs Raw number of stickers (out of 30: Condition 2 … # 16 large_envelopepercent Proportion of stickers (out of 100%; Condition … # 17 smaller_envelopeabs Raw number of stickers (out of 30: Condition 2 … # 18 small_envelopepercent Proportion of stickers (out of 100%; Condition …  Useful resources  Great blog post from Lisa DeBruine using readxl to read in data with multiple header rows (including those with merged cells!): https://debruine.github.io/multirow_headers.html This GitHub issue with Hadley’s response that solved all my problems: https://github.com/tidyverse/readr/issues/179 My original tweet when I discovered this trick!  Neat #rstats #readr #tidyverse solution to read data when 1st row is header + 2nd row is junk, thanks @hadleywickham https://t.co/5TuH7vNaID pic.twitter.com/woZ3HuECge\n\u0026mdash; Alison Hill (@apreshill) September 4, 2017   ","date":1531008000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531008000,"objectID":"0be7924ceed876d3251451fe8960c793","permalink":"https://vuongvtrinh.github.io/post/read-multiple-header-rows/","publishdate":"2018-07-08T00:00:00Z","relpermalink":"/post/read-multiple-header-rows/","section":"post","summary":"Using the readr package to sidestep a common problem","tags":["readr","tidyverse"],"title":"Read data with multiple header rows into R","type":"post"},{"authors":null,"categories":null,"content":"My blog posts and tutorials are released under a Creative Commons Attribution-ShareAlike 4.0 International License.\n  \n","date":1530136800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530136800,"objectID":"53e892b8b41cc4caece1cfd5ef21d6e7","permalink":"https://vuongvtrinh.github.io/license/","publishdate":"2018-06-28T00:00:00+02:00","relpermalink":"/license/","section":"","summary":"My blog posts and tutorials are released under a Creative Commons Attribution-ShareAlike 4.0 International License.","tags":null,"title":"CC BY SA","type":"page"},{"authors":null,"categories":null,"content":"Inspired by the book “Big Magic: Creative Living Beyond Fear” by Elizabeth Gilbert, Alison will talk about the five essential ingredients needed to creatively learn R and why these elements are also essential for advanced users to take their R skills to the next level. You will hear practical advice for when, where, and how to start a project in R, and how your learning can add value- both to your own knowledge and to contribute to the larger community of R learners. Along the way, she will share recommended resources and evidence-based strategies for project-based learning. Alison’s background working with both new and advanced R users gives her a unique perspective on this topic.\n","date":1527897600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1527897600,"objectID":"703d1a640848fe3fa05b260434572031","permalink":"https://vuongvtrinh.github.io/talk/cascadia-r-keynote/","publishdate":"2018-06-02T00:00:00Z","relpermalink":"/talk/cascadia-r-keynote/","section":"talk","summary":"Inspired by the book “Big Magic: Creative Living Beyond Fear” by Elizabeth Gilbert, Alison will talk about the five essential ingredients needed to creatively learn R and why these elements are also essential for advanced users to take their R skills to the next level. ","tags":null,"title":"Big Magic with R: Creative Learning Beyond Fear","type":"talk"},{"authors":null,"categories":null,"content":"Join us on April 6 for a walk-through of how to take a sad plot and make it better by Alison Hill, who co-teaches the CS631 Data Visualization course. Alison will take us through one plot’s life cycle, from a sad Powerpoint slide to an Excel chart and finally to the finished product made with the ggplot2 package in R. We will discuss why each version of the plot fails in different ways, how each iteration improved on the last one, and which data visualization principles are at work in the final plot to communicate a clear scientific story.\nFollowing this, Eric Earl (Senior RA in the DCAN Labs) will show a case study of visualization in neuroimaging research.\n","date":1522972800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522972800,"objectID":"4d1419273c5c87358819bc854e3b24d5","permalink":"https://vuongvtrinh.github.io/talk/ohsu-biodatavis/","publishdate":"2018-04-06T00:00:00Z","relpermalink":"/talk/ohsu-biodatavis/","section":"talk","summary":"Join us on April 6 for a walk-through of how to take a sad plot and make it better by Alison Hill.","tags":null,"title":"Take a Sad Plot \u0026 Make It Better","type":"talk"},{"authors":["Eric Feczko","Nadir Balba","Oscar Miranda-Dominguez","Michaela Cordova","Sarah Karalunas","Lourdes Irwin","Damion Demeter","Alison Presmanes Hill","Beth Hoover Langhorst","Julia Grieser Painter","Jan van Santen","Eric Fombonne","Joel Nigg","Damien Fair"],"categories":null,"content":"","date":1513728000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1513728000,"objectID":"dbc47f036e165ec68800b8c89a360f76","permalink":"https://vuongvtrinh.github.io/publication/2017-subtyping/","publishdate":"2017-12-20T00:00:00Z","relpermalink":"/publication/2017-subtyping/","section":"publication","summary":"DSM-5 Autism Spectrum Disorder (ASD) comprises a set of neurodevelopmental disorders characterized by deficits in social communication and interaction and repetitive behaviors or restricted interests, and may both affect and be affected by multiple cognitive mechanisms. This study attempts to identify and characterize cognitive subtypes within the ASD population using a random forest (RF) machine learning classification model. We trained our model on measures from seven tasks that reflect multiple levels of information processing. 47 ASD diagnosed and 58 typically developing (TD) children between the ages of 9 and 13 participated in this study. Our RF model was 72.7% accurate, with 80.7% specificity and 63.1% sensitivity. Using the RF model, we measured the proximity of each subject to every other subject, generating a distance matrix between participants. This matrix was then used in a community detection algorithm to identify subgroups within the ASD and TD groups, revealing 3 ASD and 4 TD putative subgroups with unique behavioral profiles. We then examined differences in functional brain systems between diagnostic groups and putative subgroups using resting-state functional connectivity magnetic resonance imaging (rsfcMRI). Chi-square tests revealed a significantly greater number of between group differences (p ","tags":null,"title":"Subtyping cognitive profiles in Autism Spectrum Disorder using a random forest algorithm","type":"publication"},{"authors":null,"categories":["R","presentations"],"content":"So, you are doing an R-Ladies presentation…that’s awesome! The short version I made an R-Ladies theme for xaringan slides. My original tweet about it:\nif you want to use @xieyihui\u0026#39;s awesome #xaringan package for #rstats slides but want more #Rladies flavor, there is now a built-in theme for that (with code highlighting)! Thanks to the awesome @RLadiesGlobal starter kit. Update the CSS in your YAML to use 🧙🏽‍♀️🧞‍♀️ pic.twitter.com/YnlGSVAMsl\n\u0026mdash; Alison Hill (@apreshill) November 29, 2017  The way to use the theme is to update the YAML like so:\noutput: xaringan::moon_reader: css: [\u0026quot;default\u0026quot;, \u0026quot;rladies\u0026quot;, \u0026quot;rladies-fonts\u0026quot;] Make sure your version of xaringan is up-to-date.\nBelow is a demo slide deck using the theme.\n (view the source .Rmd on GitHub)\n The longer story I recommend Yihui’s xaringan package for slides. This is an R package, available through GitHub, for creating slideshows with remark.js through R Markdown. This means that you can:\n write all your slides in Markdown text include chunks of R code and rendered output like plots, results, tables, etc. in your slides use git for version control and share your GitHub repository  This makes xaringan ideal for an R-Ladies presentation!1\nTo use the package, you’ll need the devtools package installed so that you can use the install_github function. Then do:\ndevtools::install_github(\u0026#39;yihui/xaringan\u0026#39;) As Yihui points out in the documentation, if you use RStudio, you can use the menu to navigate to File -\u0026gt; New File -\u0026gt; R Markdown -\u0026gt; From Template -\u0026gt; Ninja Presentation, and you will see an R Markdown example.\nI first used xaringan a few months ago. I was working with Yihui on the blogdown book, and had signed up to lead a workshop for the Portland R User group. Obviously, such a workshop could not have powerpoint slides, so it seemed like the perfect time to learn xaringan.\nFor my workshop, I made a simple website for the newly founded R-Ladies PDX using blogdown (Thanks to Augustina and Deeksha, our fearless organizers). So naturally, my slides needed more purple.\nLuckily, the R-Ladies run a tight ship- they have a starter kit on GitHub that details all the pretty purples they like.\nAbout a month after I did the R-Ladies blogdown workshop, I saw this blog post by Yihui:\nFirst, I thought this was such a cool idea and I hope more people make and submit themes. Then I realized, I had already made a theme! I submitted a pull request2, Yihui helped me make some edits to the CSS files to make them more parsimonious with the default theme, I electronically signed a contributor agreement, and now the theme is there for you all to enjoy and use! You use the theme by editing the YAML:\noutput: xaringan::moon_reader: css: [\u0026quot;default\u0026quot;, \u0026quot;rladies\u0026quot;, \u0026quot;rladies-fonts\u0026quot;] If you use the theme and you are on twitter, I’d love to see it- please mention me on twitter!\nExamples!\n My blogdown workshop slides: “Up and running with blogdown” (view the source .Rmd on GitHub)    Jessica Minnier’s slides for “Building Shiny Apps: With Great Power Comes Great Responsibility”     If you are new to xaringan, don’t miss the wiki!↩\n Yihui’s technical instructions for contributors section of that blog post has been revised and is very detailed↩\n   ","date":1513555200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1513555200,"objectID":"b7af40bf1bec7af959febad6d411d8d5","permalink":"https://vuongvtrinh.github.io/post/r-ladies-slides/","publishdate":"2017-12-18T00:00:00Z","relpermalink":"/post/r-ladies-slides/","section":"post","summary":"A guide to using the R-Ladies xaringan slide theme","tags":["R-Ladies","xaringan"],"title":"R-Ladies presentation ninja","type":"post"},{"authors":["Yihui Xie","Alison Presmanes Hill","Amber Thomas"],"categories":null,"content":"","date":1513209600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1513209600,"objectID":"e61ec371d9b93f524d235b910de6db2a","permalink":"https://vuongvtrinh.github.io/publication/2017-blogdown/","publishdate":"2017-12-14T00:00:00Z","relpermalink":"/publication/2017-blogdown/","section":"publication","summary":"blogdown: Creating Websites with R Markdown provides a practical guide for creating websites using the blogdown package in R. In this book, we show you how to use dynamic R Markdown documents to build static websites featuring R code (or other programming languages) with automatically rendered output such as graphics, tables, analysis results, and HTML widgets. The blogdown package is also suitable for technical writing with elements such as citations, footnotes, and LaTeX math. This makes blogdown an ideal platform for any website designed to communicate information about data science, data analysis, data visualization, or R programming. Note that blogdown is not just for blogging or sites about R; it can also be used to create general-purpose websites. By default, blogdown uses Hugo, a popular open-source static website generator, which provides a fast and flexible way to build your site content to be shared online. Other website generators like Jekyll and Hexo are also supported.","tags":null,"title":"blogdown: Creating Websites with R Markdown","type":"publication"},{"authors":null,"categories":null,"content":"   The landscape of scientific communication is changing dramatically. Diverse stakeholders, including major funders and universities are demonstrating a growing interest and investment in open scientific principles and practices. Researchers, students, and the institutions that support them are needing to navigate new expectations, workflows, and policies against a backdrop of relatively unchanged means and measures of scientific success.\nSound complicated? Join us on December 8th from 3:00 to 4:00 PM for a panel discussion with OHSU leaders and early career researchers on the evolving landscape of scientific communication. We’ll explore the drivers behind the calls for “openness”, what this means in practice, and the real world compatibility and tensions between open science and student, researcher, and institutional success.\nConfirmed panelists include:\nDr. Gary Westbrook, Vollum Institute Senior Scientist and Director of the Neuroscience Graduate Program\nDr. Bita Moghaddam, Chair of the Department of Behavioral Neuroscience\nDr. Abhinav Nellore, Assistant Professor, Biomedical Engineering and the Department of Surgery\nDr. Alison Hill, Associate Professor, Center for Spoken Language Understanding\nThe panel will be followed by food, drinks, and two hands on workshops from 4:00 - 5:30:\n  In this workshop, Dr. Alison Hill and Robin Champieux demonstrated tools and methods for building transparency within a lab, and onboarding new graduate students and postdocs. We provided a template GitHub repository and code of conduct designed to facilitate a healthy and productive learning and research environment. You are encouraged to use these tools to communicate expectations, document protocols, receive feedback, and facilitate the long-term value of students’ and trainees’ contributions.\nLabhub is a work in progress. We created this repository as an education and demonstration tool for faculty, postdocs, and students curious about how documentation, open science workflows, and tools like Github can contribute to a healthy and productive research environment. Your ideas and contributions are welcome!\n","date":1512691200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512691200,"objectID":"e918d133d155fd3c3cb380258789d196","permalink":"https://vuongvtrinh.github.io/talk/labhub/","publishdate":"2017-12-08T00:00:00Z","relpermalink":"/talk/labhub/","section":"talk","summary":"An OHSU Open Science Workshop on tools and methods for building transparency within a lab","tags":null,"title":"Labhub Workshop","type":"talk"},{"authors":null,"categories":null,"content":"We will cover:\n The blogdown R package Hugo themes Adding content to personalize your site Posting Don\u0026rsquo;t want to blog? / just want to knit? Customizing themes Troubleshooting common problems Deployment options and recommendations Domain options available through RStudio/rbind  If you are planning on attending this workshop, please click on the HTML link above for how to prepare before the workshop.\n  ","date":1505347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1505347200,"objectID":"37df67d10317f5c642fde1aee436af9a","permalink":"https://vuongvtrinh.github.io/talk/blogdown-meetup/","publishdate":"2017-09-14T00:00:00Z","relpermalink":"/talk/blogdown-meetup/","section":"talk","summary":"Join me for a workshop to get you up and running with your own personal website. If you are looking to start your own site, come learn how to do it for free using using R, RStudio, and the blogdown R package.","tags":null,"title":"Up \u0026 Running with blogdown","type":"talk"},{"authors":null,"categories":["R"],"content":" 1 Read up on blogdown 2 Caveats, disclaimers, etc. 3 In GitHub 4 In terminal 5 In RStudio 6 Build your site in RStudio 7 Deploy in Netlify 8 Going further   1 Read up on blogdown Before you start, I recommend reading the following:\n blogdown: Creating Websites with R Markdown by Yihui Xie and Amber Thomas Making a Website Using blogdown, Hugo, and GitHub pages also by Amber Thomas  I also found this comment by Eric Nantz, the creator of the R-Podcast, in the rbind/support issues section on GitHub to be helpful:\n https://github.com/rbind/support/issues/12   2 Caveats, disclaimers, etc. Even with all the great resources I listed above, getting myself up and running took a few tries, so in this post I’m passing along what ended up working for me. Everyone’s mileage may vary, though, depending on your operating system and your approach. About me: I am a macOS user, and I use R, RStudio, Git (usually via GitLab, sometimes via GitHub), and terminal regularly, so I’m assuming familiarity here with all of these. If that is not you, here are some places to get started:\n For Git: Happy Git with R by Jenny Bryan et al. For RStudio: DataCamp’s Working with the RStudio IDE (free) by Garrett Grolemund For Terminal: The Command Line Murder Mystery by Noah Veltman, and The UNIX Workbench by Sean Kross  I also have Xcode and Homebrew installed- you will probably need these to download Hugo. If you don’t have either but are on a mac, this link may help:\n How to install Xcode, Homebrew, Git, RVM, Ruby \u0026amp; Rails on Mac OS X  Finally, I did not want to learn more about a lot of things! For instance, the nitty gritty of static site generators and how domain names work. I am a new mom, and just in the process of writing all this up, I filled up my tea mug twice with ice cold water, and filled my water bottle with scalding hot water. So, where offered, I followed the advice of Yihui and Amber. For example:\n “Considering the cost and friendliness to beginners, we currently recommend Netlify.” Sold. “If you are not familiar with domain names or do not want to learn more about them, an option for your consideration is a free subdomain *.rbind.io offered by RStudio, Inc.”. Done.   3 In GitHub Go online to your GitHub account, and create a new repository (check to initialize with a README but don’t add .gitignore- this will be taken care of later). For naming your repo, consider your future deployment plan:\n If you are going to use Netlify to host the site, you can name this repository anything you want! You can see some of the repo names used by members of the rbind organization here.\n  If you want to host your site as a GitHub Page, you should name your repository yourgithubusername.github.io (so mine would have been apreshill.github.io). If you are going this route, I suggest you follow Amber’s instructions instead of mine!   Screenshot above: Creating a new repository in GitHub\n Go to the main page of your new repository, and under the repository name, click the green Clone or download button.\n In the Clone with HTTPs section, click on the clipboard icon to copy the clone URL for your new repository. You’ll paste this text into terminal in the next section.\n   4 In terminal Now you will clone your remote repository and create a local copy on your computer so you can sync between the two locations (using terminal or your alternative command line tool for a Windows machine).\nUse cd to navigate into the directory where you want your repo to be\n Once there, type: git clone [paste]. So my command looked like this:\n  git clone https://github.com/apreshill/apreshill.git And this is what printed to my terminal window:\nCloning into \u0026#39;apreshill\u0026#39;... remote: Counting objects: 3, done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), done. Checking connectivity... done. Close terminal, you are done in there.   5 In RStudio Install blogdown from your RStudio console. If you already have devtools installed like I did, you can just use the second line below:  if (!requireNamespace(\u0026quot;devtools\u0026quot;)) install.packages(\u0026quot;devtools\u0026quot;) devtools::install_github(\u0026quot;rstudio/blogdown\u0026quot;) Install Hugo using the blogdown package helper function:  blogdown::install_hugo() # or library(blogdown) install_hugo() This is where my instructions diverge from Ed’s- he states that blogdown won’t create a website in your root folder because the README.md file is already there. I didn’t find that to be the case- I tested this with a new site as well. If one way doesn’t work for you, try the other!\n Use the top menu buttons in RStudio to select File -\u0026gt; New Project -\u0026gt; Existing Directory, then browse to the directory on your computer where your GitHub repo is and click on the Create Project button.  Screenshot above: Creating a new project in an existing directory in RStudio\n Now you should be “in” your project in RStudio. If you are using git for version control, edit your *gitignore file. This file should be viewable in your file viewer pane in RStudio. Below is what it should look like: the first four lines will automatically be in this file if you have set up your RStudio Project, but if you plan to use Netlify to deploy, you need to add the public/ line (read about here.)  .Rproj.user .Rhistory .RData .Ruserdata blogdown .DS_Store # if a windows user, Thumbs.db instead public/ # if using Netlify  6 Build your site in RStudio Now you can finally build your site using the blogdown::new_site() function. But first you should at least think about themes…\n6.1 Picking a theme There are over 90 Hugo themes. So I went back to the blogdown book. Thankfully, Yihui and Amber offer “to save you some time, we list a few themes below that match our taste…”. Huzzah- I went with hugo-academic! Whatever theme you choose, you’ll need to pick one of 3 ways to make your new site:\nIf you are happy with the default theme, which is the lithium theme, you can use:  blogdown::new_site() # default theme is lithium If you want a theme other than the default, you can specify the theme at the same time as you call the new_site function:  # for example, create a new site with the academic theme blogdown::new_site(theme = \u0026quot;gcushen/hugo-academic\u0026quot;, theme_example = TRUE) If instead you want to add the theme later (like I did, because I didn’t see the above example until it was too late!), you can do this:  library(blogdown) new_site() # default theme is lithium # need to stop serving so can use the console again install_theme(\u0026quot;gcushen/hugo-academic\u0026quot;, theme_example = TRUE, update_config = TRUE) Now is a good time to re-read about blogdown::serve_site() and how LiveReload works (and how it blocks your R console by default)\n I recommend setting theme_example = TRUE- some themes won’t provide an example site, but the academic theme did and I found it helpful to see. You can always delete the example content.\n 6.2 Update project options In your project in RStudio, go to the top menu bar of RStudio and select Tools -\u0026gt; Project Options and update following Yihui and Amber’s instructions.\n 6.3 Edit your configurations Relevant reading:\n blogdown book chapter on configuration Additional detail from Amber You can also view my config.toml file  Now, edit the baseurl in your config.toml file. The URL should always end with a / trailing slash. At this point, you probably haven’t deployed your site yet, so to view it locally you can use the Serve Site add-in, or run the blogdown::serve_site function. Both of these baseurls worked for me when viewing locally:\nbaseurl = \u0026quot;https://example.com/\u0026quot; baseurl = \u0026quot;/\u0026quot; Make sure that the baseurl = listed ends with a trailing slash /!\n Go ahead and edit all the other elements in the config.toml file now as you please- this is how you personalize your site!\n 6.4 Addins \u0026amp; workflow Relevant reading:\n blogdown book chapter on the RStudio IDE  Addins: use them- you won’t need the blogdown library loaded in the console if you use the Addins. My workflow in RStudio at this point (again, just viewing locally because we haven’t deployed yet) works best like this:\nOpen the RStudio project for the site Use the Serve Site add-in (only once due to the magic of LiveReload) View site in the RStudio viewer pane, and open in a new browser window while I work Select existing files to edit using the file pane in RStudio After making changes, click the save button (don’t knit!)- the console will reload, the viewer pane will update, and if you hit refresh in the browser your local view will also be updated When happy with changes, add/commit/push changes to GitHub  Having blogdown::serve_site running locally with LiveReload is especially useful as you can immediately see if you have totally screwed up. For example, in editing my about.md file, this error popped up in my console after making a change and I was able to fix the error right away:\nStarted building sites ... ERROR 2017/06/08 16:22:34 failed to parse page metadata for home/about.md: (18, 6): missing comma Error: Error building site: Errors reading pages: Error: failed to parse page metadata for home/about.md: (18, 6): missing comma for about.md The above workflow is only for editing existing files or posts, but not for creating new posts. For that, read on…\n 6.5 Posting Relevant reading:\n blogdown book chapter on RStudio IDE blogdown book chapter on output formats: on .md versus .Rmd posts Additional detail from Amber on adding a blog post  Bottom line:\nUse the New Post addin. But, you need the console to do this, so you have to stop blogdown::serve_site by clicking on the red Stop button first. The Addin is a Shiny interface that runs this code in your console: blogdown:::new_post_addin(). So, your console needs to be unblocked for it to run. You also need to be “in” your RStudio project or it won’t work.\n6.5.1 Draft posts Relevant reading:\n blogdown book chapter on building a website for local preview  Whether you do a markdown or R Markdown post (see below), you should know that in the YAML front matter of your new file, you can add draft: TRUE and you will be able to preview your post using blogdown::serve_site(), but conveniently your post will not show up on your deployed site until you set it to false. Because this is a function built into Hugo, all posts (draft or not) will still end up in your GitHub repo though.\n 6.5.2 New markdown posts Pick one of 2 methods:\nUse the New Post addin and with the radio button at the bottom select Format: Markdown (recommended) Use the console to author a new .md post:  blogdown::new_post() blogdown::new_post(rmd = FALSE) # false is the default! Here are the ?new_post arguments:\nnew_post(title, kind = \u0026quot;default\u0026quot;, open = interactive(), author = getOption(\u0026quot;blogdown.author\u0026quot;), categories = NULL, tags = NULL, date = Sys.Date(), file = NULL, slug = NULL, subdir = getOption(\u0026quot;blogdown.subdir\u0026quot;, \u0026quot;post\u0026quot;), rmd = getOption(\u0026quot;blogdown.rmd\u0026quot;, FALSE)) Remember to use the Serve Site addin again so that you can immediately view your changes with every save using LiveReload.\n  6.5.3 New RMarkdown posts Again, you have your choice of one of 2 methods:\nUse the New Post addin and with the radio button at the bottom select Format: RMarkdown (recommended) Use the console to author a new .Rmd post:  blogdown::new_post(rmd = TRUE) # false is the default! After you edit your .Rmd post, in addition to saving the changes in your .Rmd file, you must use blogdown::serve_site- this is how the output html file needs to be generated.\nDo not knit your .Rmd posts- use blogdown::serve_site instead. If you happen to hit the knit button, just Serve Site again to rewrite the .html file.\n Ultimately, your YAML front matter looks something like this; note that some but not all features of rmarkdown::html_document are supported in blogdown:\n--- title: \u0026quot;My Awesome Post\u0026quot; author: \u0026quot;John Doe\u0026quot; date: \u0026quot;2017-02-14\u0026quot; output: blogdown::html_page: toc: true toc_depth: 1 number_sections: true fig_width: 6 --- Remember to use the Serve Site addin again so that you can immediately view your changes with every save using LiveReload and your .html file is properly output.\n  6.5.4 Adding images to a post If you want to include an image that is not a figure created from an R chunk, the recommended method is to:\nAdd the image to your /static/img/ folder, then Reference the image using the relative file path as follows:  ![my-image](/img/my-image.png)    7 Deploy in Netlify Deploying in Netlify through GitHub is smooth. Yihui and Amber give some beginner instructions, but Netlify is so easy, I recommend that you skip dragging your public folder in and instead automate the process through GitHub.\nWhen you are ready to deploy, commit your changes and push to GitHub, then go online to Netlify. Click on the Sign Up button and sign up using your existing GitHub account (no need to create another account) Log in, and select: New site from Git -\u0026gt; Continuous Deployment: GitHub. From there, Netlify will allow you to select from your existing GitHub repositories. You’ll pick the repo you’ve been working from with blogdown, then you’ll configure your build. This involves specifying two important things: the build command and the publish directory (this should be public).\n More about the build command from Netlify: “For Hugo hosting, hugo will build and deploy with the version 0.17 of hugo. You can specify a specific hugo release like this: hugo_0.15. Currently 0.13, 0.14, 0.15, 0.16, 0.17, 0.18 and 0.19 are supported. For version 0.20 and above, you’ll need to create a Build environment variable called HUGO_VERSION and set it to the version of your choice.” I opted for the former, and specified hugo_0.19.   You can check your hugo version in terminal using the command hugo version. This is what my output looked like, so I could run version 0.20 if I wanted to through Netlify, but I went with 0.19 and it works just fine.\n$ hugo version Hugo Static Site Generator v0.20.7 darwin/amd64 BuildDate: 2017-05-08T18:37:40-07:00 Screenshot above: Basic build settings in Netlify\n Netlify will deploy your site and assign you a random subdomain name of the form random-word-12345.netlify.com. Mine was particularly unfortunate, with the random word garbage-collector-janice. You should know that you can change this; I changed mine to apreshill.netlify.com.\nAnytime you change your subdomain name, you need to update the baseurl in your config.toml file (so I changed mine to baseurl = “https://apreshill.netlify.com/”).\n At this point, you should be up and running with blogdown, GitHub, and Netlify, but here are some ideas if you want to go further…\n 8 Going further 8.1 Custom CSS I like to tinker with default theme settings like colors and fonts. Every Hugo theme is structured a little differently, but if you are interested, you can check out my custom css to see how I customized the academic theme, which provides a way to link to a custom CSS file in the config.toml file:\n # Link custom CSS and JS assets # (relative to /static/css and /static/js respectively) custom_css = [\u0026quot;blue.css\u0026quot;]  8.2 Formspree I used Formspree to make a contact form, which is an online service (managed on GitHub) that allows you to add an HTML form to your static site. No registration, just use the form and confirm your email address once. I added the following code into my contact widget:\n\u0026lt;form action=\u0026quot;https://formspree.io/your@email.com\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;name\u0026quot;\u0026gt;Your name: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;name\u0026quot; required=\u0026quot;required\u0026quot; placeholder=\u0026quot;here\u0026quot;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;label for=\u0026quot;email\u0026quot;\u0026gt;Your email: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;email\u0026quot; name=\u0026quot;_replyto\u0026quot; required=\u0026quot;required\u0026quot; placeholder=\u0026quot;here\u0026quot;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;label for=\u0026quot;message\u0026quot;\u0026gt;Your message:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt; \u0026lt;textarea rows=\u0026quot;4\u0026quot; name=\u0026quot;message\u0026quot; id=\u0026quot;message\u0026quot; required=\u0026quot;required\u0026quot; class=\u0026quot;form-control\u0026quot; placeholder=\u0026quot;I can\u0026#39;t wait to read this!\u0026quot;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;_next\u0026quot; value=\u0026quot;/html/thanks.html\u0026quot; /\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Send\u0026quot; name=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-primary btn-outline\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;_subject\u0026quot; value=\u0026quot;Website message\u0026quot; /\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;_gotcha\u0026quot; style=\u0026quot;display:none\u0026quot; /\u0026gt; \u0026lt;/form\u0026gt;  8.3 *.rbind.io domain names You may want a different domain name than the one provided by Netlify. I opted for a free subdomain *.rbind.io offered by RStudio. To do the same, head over to the rbind/support GitHub page and open a new issue. All you need to do is let them know what your Netlify subdomain name is (*.netlify.com), and what you want your subdomain name to be (*.rbind.io). The awesome rbind support team will help you take it from there!\nAgain, you will need to update the baseurl in your config.toml file to reflect your new rbind subdomain name (so mine is baseurl = “https://alison.rbind.io/”).\n  8.4 Have fun! Lastly, don’t forget to just have fun with it. Happy blogdowning!\n  via GIPHY   ","date":1497225600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1497225600,"objectID":"e9d739aa7819749d2a778520b05c91e1","permalink":"https://vuongvtrinh.github.io/post/up-and-running-with-blogdown/","publishdate":"2017-06-12T00:00:00Z","relpermalink":"/post/up-and-running-with-blogdown/","section":"post","summary":"A guide to getting up and running with blogdown, GitHub, and Netlify","tags":["blogdown"],"title":"Up and running with blogdown","type":"post"},{"authors":["Heather MacFarlane","Kyle Gorman","Rosemary Ingham","Alison Presmanes Hill","Katina Papadakis","Geza Kiss","Jan van Santen"],"categories":null,"content":"","date":1489536000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1489536000,"objectID":"d0febf90eefe4dcc6d7064596e6aa73e","permalink":"https://vuongvtrinh.github.io/publication/2017-mazes-asd-sli/","publishdate":"2017-03-15T00:00:00Z","relpermalink":"/publication/2017-mazes-asd-sli/","section":"publication","summary":"Deficits in social communication, particularly pragmatic language, are characteristic of individuals with autism spectrum disorder (ASD). Speech disfluencies may serve pragmatic functions such as cueing speaking problems. Previous studies have found that speakers with ASD differ from typically developing (TD) speakers in the types and patterns of disfluencies they produce, but fail to provide sufficiently detailed characterizations of the methods used to categorize and quantify disfluency, making cross-study comparison difficult. In this study we propose a simple schema for classifying major disfluency types, and use this schema in an exploratory analysis of differences in disfluency rates and patterns among children with ASD compared to TD and language impaired (SLI) groups. 115 children ages 4–8 participated in the study (ASD = 51; SLI = 20; TD = 44), completing a battery of experimental tasks and assessments. Measures of morphological and syntactic complexity, as well as word and disfluency counts, were derived from transcripts of the Autism Diagnostic Observation Schedule (ADOS). High inter-annotator agreement was obtained with the use of the proposed schema. Analyses showed ASD children produced a higher ratio of content to filler disfluencies than TD children. Relative frequencies of repetitions, revisions, and false starts did not differ significantly between groups. TD children also produced more cued disfluencies than ASD children.","tags":null,"title":"Quantitative Analysis of Disfluency in Children with Autism Spectrum Disorder or Language Impairment","type":"publication"},{"authors":null,"categories":null,"content":"   ","date":1466726400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1466726400,"objectID":"c00647640ca8d8673fb65db586c3678d","permalink":"https://vuongvtrinh.github.io/talk/code-your-graph/","publishdate":"2016-06-24T00:00:00Z","relpermalink":"/talk/code-your-graph/","section":"talk","summary":"A workshop on visualizing your data with ggplot and matplotlib","tags":null,"title":"Code Your Graph Workshop","type":"talk"},{"authors":["Alison Presmanes Hill","Katharine Zuckerman","Eric Fombonne"],"categories":null,"content":"","date":1455840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1455840000,"objectID":"0b6a054d394b57b2726a4664b37d577a","permalink":"https://vuongvtrinh.github.io/publication/2016-primer-on-asd/","publishdate":"2016-02-19T00:00:00Z","relpermalink":"/publication/2016-primer-on-asd/","section":"publication","summary":"In this chapter, we review existing prevalence estimates for ASDs since 2000 and discuss methodological factors impacting the estimation of prevalence and the interpretation of changes in prevalence estimates over time. Possible explanations for an increase in the prevalence of ASD within and across populations are considered. Increases in ASD diagnostic rates cannot currently be attributed to a true increase in the incidence of ASD due to multiple confounding factors. It remains to be seen how changes to diagnostic criteria introduced in the DSM-5 will impact estimates of ASD prevalence going forward.","tags":null,"title":"Epidemiology of autism spectrum disorders","type":"publication"},{"authors":["Kyle Gorman","Lindsay Olson","Alison Presmanes Hill","Rebecca Lunsford","Peter A. Heeman","Jan P. H. van Santen"],"categories":null,"content":"","date":1453420800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1453420800,"objectID":"09b001253620028175a8ded4912e712c","permalink":"https://vuongvtrinh.github.io/publication/2016-uh-and-um-asd-sli/","publishdate":"2016-01-22T00:00:00Z","relpermalink":"/publication/2016-uh-and-um-asd-sli/","section":"publication","summary":"Atypical pragmatic language is often present in individuals with autism spectrum disorders (ASD), along with delays or deficits in structural language. This study investigated the use of the “fillers” uh and um by children ages 4–8 during the autism diagnostic observation schedule. Fillers reflect speakers’ difficulties with planning and delivering speech, but they also serve communicative purposes, such as negotiating control of the floor or conveying uncertainty. We hypothesized that children with ASD would use different patterns of fillers compared to peers with typical development or with specific language impairment (SLI), reflecting differences in social ability and communicative intent. Regression analyses revealed that children in the ASD group were much less likely to use um than children in the other two groups. Filler use is an easy-to-quantify feature of behavior that, in concert with other observations, may help to distinguish ASD from SLI.","tags":null,"title":"Uh and Um in Children With Autism Spectrum Disorders or Language Impairment","type":"publication"},{"authors":["Alison Presmanes Hill","Katharine E. Zuckerman","Eric Fombonne"],"categories":null,"content":"METHODS: Participants were 5053 children with confirmed diagnosis of ASD in the Autism Speaks Autism Treatment Network. Measured values for weight and height were used to calculate BMI percentiles; Centers for Disease Control and Prevention criteria for BMI for gender and age were used to define overweight and obesity (85th and 95th percentiles, respectively).\nRESULTS: In children age 2 to 17 years, 33.6% were overweight and 18% were obese. Compared with a general US population sample, rates of unhealthy weight were significantly higher among children with ASDs ages 2 to 5 years and among those of non-Hispanic white origin. Multivariate analyses revealed that older age, Hispanic or Latino ethnicity, lower parent education levels, and sleep and affective problems were all significant predictors of obesity.\nCONCLUSIONS: Our results indicate that the prevalence of unhealthy weight is significantly greater among children with ASD compared with the general population, with differences present as early as ages 2 to 5 years. Because obesity is more prevalent among older children in the general population, these findings raise the question of whether there are different trajectories of weight gain among children with ASDs, possibly beginning in early childhood.\n","date":1441238400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441238400,"objectID":"159c707438c6bc3dd89b73a846e84007","permalink":"https://vuongvtrinh.github.io/publication/2015-obesity-in-asd-multisite/","publishdate":"2015-09-03T00:00:00Z","relpermalink":"/publication/2015-obesity-in-asd-multisite/","section":"publication","summary":"Overweight and obesity are increasingly prevalent in the general pediatric population. Evidence suggests that children with autism spectrum disorders (ASDs) may be at elevated risk for unhealthy weight. We identify the prevalence of overweight and obesity in a multisite clinical sample of children with ASDs and explore concurrent associations with variables identified as risk factors for unhealthy weight in the general population. ","tags":null,"title":"Obesity and Autism","type":"publication"},{"authors":["ALison Presmanes Hill","Jan van Santen","Kyle Gorman","Beth Hoover Langhorst","Eric Fombonne"],"categories":null,"content":"","date":1434240000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1434240000,"objectID":"9b8a3141e9c30d4d6f012c4b05642832","permalink":"https://vuongvtrinh.github.io/publication/2015-memory-in-li-asd/","publishdate":"2015-06-14T00:00:00Z","relpermalink":"/publication/2015-memory-in-li-asd/","section":"publication","summary":"Background: A subgroup of young children with autism spectrum disorders (ASD) have significant language impairments (phonology, grammar, vocabulary), although such impairments are not considered to be core symptoms of and are not unique to ASD. Children with specific language impairment (SLI) display similar impairments in language. Given evidence for phenotypic and possibly etiologic overlap between SLI and ASD, it has been suggested that language-impaired children with ASD (ASD + language impairment, ALI) may be characterized as having both ASD and SLI. However, the extent to which the language phenotypes in SLI and ALI can be viewed as similar or different depends in part upon the age of the individuals studied. The purpose of the current study is to examine differences in memory abilities, specifically those that are key “markers” of heritable SLI, among young school-age children with SLI, ALI, and ALN (ASD + language normal). Methods: In this cross-sectional study, three groups of children between ages 5 and 8 years participated: SLI (n = 18), ALI (n = 22), and ALN (n = 20). A battery of cognitive, language, and ASD assessments was administered as well as a nonword repetition (NWR) test and measures of verbal memory, visual memory, and processing speed. Results: NWR difficulties were more severe in SLI than in ALI, with the largest effect sizes in response to nonwords with the shortest syllable lengths. Among children with ASD, NWR difficulties were not associated with the presence of impairments in multiple ASD domains, as reported previously. Verbal memory difficulties were present in both SLI and ALI groups relative to children with ALN. Performance on measures related to verbal but not visual memory or processing speed were significantly associated with the relative degree of language impairment in children with ASD, supporting the role of verbal memory difficulties in language impairments among early school-age children with ASD. Conclusions: The primary difference between children with SLI and ALI was in NWR performance, particularly in repeating two- and three-syllable nonwords, suggesting that shared difficulties in early language learning found in previous studies do not necessarily reflect the same underlying mechanisms.","tags":null,"title":"Memory in language-impaired children with and without autism","type":"publication"},{"authors":["Alison Presmanes Hill","Katharine Zuckerman","Eric Fombonne"],"categories":null,"content":"","date":1433894400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1433894400,"objectID":"a74fffb3b5bb1b85c72e901b096bac30","permalink":"https://vuongvtrinh.github.io/publication/2015-translational/","publishdate":"2015-06-10T00:00:00Z","relpermalink":"/publication/2015-translational/","section":"publication","summary":"In this chapter, we review existing prevalence estimates for autism spectrum disorders (ASDs) since 2000 and discuss methodological factors impacting the estimation of prevalence and the interpretation of changes in prevalence estimates over time. Possible explanations for an increase in the prevalence of ASD within and across populations are considered. Increases in ASD diagnostic rates cannot currently be attributed to a true increase in the incidence of ASD due to multiple confounding factors. It remains to be seen how changes to diagnostic criteria introduced in the DSM-5 will impact estimates of ASD prevalence going forward.","tags":null,"title":"Epidemiology of autism spectrum disorders","type":"publication"},{"authors":["Alison Presmanes Hill","Katherine E. Zuckerman","Arlene D. Hagen","Daniel J. Kriz","Susanne W. Duvall","Jan van Santen","Joel Nigg","Damien Fair","Eric Fombonne"],"categories":null,"content":"","date":1403395200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1403395200,"objectID":"ba3062d9d35a8a913fc48e7637ea70fe","permalink":"https://vuongvtrinh.github.io/publication/2014-aggression-in-asd/","publishdate":"2014-06-22T00:00:00Z","relpermalink":"/publication/2014-aggression-in-asd/","section":"publication","summary":"Aggressive behavior problems (ABP) are frequent yet poorly understood in children with autism spectrum disorders (ASD) and are likely to co-vary significantly with comorbid problems. We examined the prevalence and sociodemographic correlates of ABP in a clinical sample of children with ASD (N = 400; 2–16.9 years). We also investigated whether children with ABP experience more intensive medical interventions, greater impairments in behavioral functioning, and more severe comorbid problems than children with ASD who do not have ABP. One in four children with ASD had Child Behavior Checklist scores on the Aggressive Behavior scale in the clinical range (T-scores = 70). Sociodemographic factors (age, gender, parent education, race, ethnicity) were unrelated to ABP status. The presence of ABP was significantly associated with increased use of psychotropic drugs and melatonin, lower cognitive functioning, lower ASD severity, and greater comorbid sleep, internalizing, and attention problems. In multivariate models, sleep, internalizing, and attention problems were most strongly associated with ABP. These comorbid problems may hold promise as targets for treatment to decrease aggressive behavior and proactively identify high-risk profiles for prevention.","tags":null,"title":"Aggressive Behavior Problems in Children with Autism Spectrum Disorders: Prevalence and Correlates in a Large Clinical Sample","type":"publication"},{"authors":["Alison Presmanes Hill","Katharine Zuckerman","Eric Fombonne"],"categories":null,"content":"","date":1393804800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1393804800,"objectID":"27f62fe82863f321b72f90826a502f9e","permalink":"https://vuongvtrinh.github.io/publication/2014-handbook/","publishdate":"2014-03-03T00:00:00Z","relpermalink":"/publication/2014-handbook/","section":"publication","summary":"Since 1966, over 80 epidemiological surveys of autism spectrum disorders (ASDs) have been conducted in more than 20 countries. In this chapter, we review existing prevalence estimates for ASDs and discuss methodological factors impacting the estimation of prevalence and the interpretation of changes in prevalence estimates over time. Possible explanations for an increase in the prevalence of ASD within and across populations are considered. Increases in ASD diagnostic rates cannot currently be attributed to a true increase in the incidence of ASD due to multiple confounding factors. It remains to be seen how changes to diagnostic criteria introduced in the DSM-5 will impact estimates of ASD prevalence going forward.","tags":null,"title":"Epidemiology of autism spectrum disorders","type":"publication"},{"authors":["Katharine E. Zuckerman","Alison P. [Presmanes] Hill","Kimberly Guion","Lisa Voltolina","Eric Fombonne"],"categories":null,"content":"","date":1391299200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1391299200,"objectID":"ef04d4e41554e20028cbe353dc2912ab","permalink":"https://vuongvtrinh.github.io/publication/2014-obesity-in-asd-oregon/","publishdate":"2014-02-02T00:00:00Z","relpermalink":"/publication/2014-obesity-in-asd-oregon/","section":"publication","summary":"Autism Spectrum Disorders (ASDs) and childhood obesity (OBY) are rising public health concerns. This study aimed to evaluate the prevalence of overweight (OWT) and OBY in a sample of 376 Oregon children with ASD, and to assess correlates of OWT and OBY in this sample. We used descriptive statistics, bivariate, and focused multivariate analyses to determine whether socio-demographic characteristics, ASD symptoms, ASD cognitive and adaptive functioning, behavioral problems, and treatments for ASD were associated with OWT and OBY in ASD. Overall 18.1 % of children met criteria for OWT and 17.0 % met criteria for OBY. OBY was associated with sleep difficulties, melatonin use, and affective problems. Interventions that consider unique needs of children with ASD may hold promise for improving weight status among children with ASD.","tags":null,"title":"Overweight and Obesity: Prevalence and Correlates in a Large Clinical Sample of Children with Autism Spectrum Disorder","type":"publication"},{"authors":["Alison Presmanes Hill","Eric Fombonne"],"categories":null,"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"8a79d2607d7d3103cc12100012e71247","permalink":"https://vuongvtrinh.github.io/publication/2014-asd-epidemiology-in-practice/","publishdate":"2014-01-01T00:00:00Z","relpermalink":"/publication/2014-asd-epidemiology-in-practice/","section":"publication","summary":"In this selective review of the literature, we present the most recent prevalence estimates for autism spectrum disorder (ASD) and discuss the limitations and challenges in interpreting changes in prevalence estimates over time. Increases in ASD prevalence estimates cannot currently be attributed to a true increase in the incidence of ASD due to multiple confounding factors. These include broader diagnostic criteria and a greater awareness of ASD. The current average prevalence of ASD is approximately 66/10,000, which translates to approximately 1 in 152 children a ected, with males consistently outnumbering females by about 5:1. Several recent studies have reported higher estimates ranging from 147 (one in 68) to 264 (one in 38) per 10,000. This is in sharp contrast to the  gures of about 1-5/10,000 quoted in earlier studies that used a narrow de nition of autistic disorder and were not inclusive of all disorders falling onto the autism spectrum. It remains to be seen how changes to diagnostic criteria introduced in the DSM-5 will impact estimates of ASD prevalence.","tags":null,"title":"Epidemiology of Autism Spectrum Disorder","type":"publication"},{"authors":["Jan P. H. van Santen","Richard W. Sproat","Alison Presmanes Hill"],"categories":null,"content":"","date":1365724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1365724800,"objectID":"053861617f3b4a9dad6296b5cbe8ea21","permalink":"https://vuongvtrinh.github.io/publication/2013-repetitive-speech-in-asd-sli/","publishdate":"2013-04-12T00:00:00Z","relpermalink":"/publication/2013-repetitive-speech-in-asd-sli/","section":"publication","summary":"We report on an automatic technique for quantifying two types of repetitive speech: repetitions of what the child says him/herself (self-repeats) and of what is uttered by an interlocutor (echolalia). We apply this technique to a sample of 111 children between the ages of four and eight: 42 typically developing children (TD), 19 children with specific language impairment (SLI), 25 children with autism spectrum disorders (ASD) plus language impairment (ALI), and 25 children with ASD with normal, non-impaired language (ALN). The results indicate robust differences in echolalia between the TD and ASD groups as a whole (ALN + ALI), and between TD and ALN children. There were no significant differences between ALI and SLI children for echolalia or self-repetitions. The results confirm previous findings that children with ASD repeat the language of others more than other populations of children. On the other hand, self-repetition does not appear to be significantly more frequent in ASD, nor does it matter whether the child’s echolalia occurred within one (immediate) or two turns (near-immediate) of the adult’s original utterance. Furthermore, non-significant differences between ALN and SLI, between TD and SLI, and between ALI and TD are suggestive that echolalia may not be specific to ALN or to ASD in general. One important innovation of this work is an objective fully automatic technique for assessing the amount of repetition in a transcript of a child’s utterances.","tags":null,"title":"Quantifying Repetitive Speech in Autism Spectrum Disorders and Language Impairment","type":"publication"},{"authors":["Kristina M. Zosuls","Carol Lynn Martin","Diane N. Ruble","Cindy F. Miller","Bridget M. Gaertner","Dawn E. England","Alison P.[Presmanes] Hill"],"categories":null,"content":"","date":1297123200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1297123200,"objectID":"4fc09d6b6c9a5931644746dad6d8415a","permalink":"https://vuongvtrinh.github.io/publication/2011-gender-attitudes/","publishdate":"2011-02-08T00:00:00Z","relpermalink":"/publication/2011-gender-attitudes/","section":"publication","summary":"Widespread gender segregation, evident throughout elementary school, seems to imply that girls and boys have negative feelings and thoughts about one another, and classic theories of inter-group processes support this idea. However, research has generally overlooked children’s feelings and perceptions about gender-related interpersonal interactions. This paper investigates the nature of children’s attitudes about same- and other-gender peers, and explores how those attitudes relate to the expectancies and beliefs children hold about same- and other-gender peer interactions. Children (N = 98 fifth graders) completed questionnaires assessing their global liking of own- and other-gender peers (Yee \u0026 Brown, 1994), positive and negative attitudes about own- and other-gender peers, and outcome expectancies related to interacting with own- and other-gender peers. Results indicated that rather than being characterized by out-group negativity, children’s inter-group gender attitudes are best characterized by an in-group positivity bias. Children’s positive and negative affective attitudes were also significantly associated with outcome expectancies. In contrast, global liking of own- and other- gender peers was less predictive of outcome expectancies. Thus, the greater specificity of the affective attitude measures appeared to be a more predictive and potentially fruitful gauge of children’s feelings about own- and other-gender peers. Results are discussed in terms of the need for finer grained and more extensive studies of children’s gender-related feelings and cognitions about own- and other-gender peers.","tags":null,"title":"‘It’s Not That We Hate You’: Understanding Children’s Gender Attitudes and Expectancies About Peer Relationships","type":"publication"},{"authors":["Alison G. Presmanes [Hill]","Tedra A. Walden","Wendy L. Stone","Paul J. Yoder"],"categories":null,"content":"","date":1167609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1167609600,"objectID":"10ead64306e34e2ab8a84ae656109223","permalink":"https://vuongvtrinh.github.io/publication/2007-rja-in-sibs/","publishdate":"2007-01-01T00:00:00Z","relpermalink":"/publication/2007-rja-in-sibs/","section":"publication","summary":"We compared responding to joint attention (RJA) in younger siblings of children with ASD (SIBS- ASD; n = 46) and younger siblings of children developing typically (SIBS-TD; n = 35). Children were tested between 12 and 23 months of age in a situation in which an experimenter directed the child’s attention to one of 8 targets. Each child responded to 10 different combinations of verbal and nonverbal cues containing varying levels of attention-specifying information. SIBS-ASD had significantly lower overall RJA scores than SIBS-TD. Moderately redundant cues were most difficult for SIBS-ASD relative to SIBS-TD; adding a point to moderately redundant cues improved RJA for SIBS-ASD, bringing them to a level of RJA commensurate with SIBS-TD.","tags":null,"title":"Effects of Different Attentional Cues on Responding to Joint Attention in Younger Siblings of Children with Autism Spectrum Disorders","type":"publication"},{"authors":["David P. McCabe","Alison G. Presmanes [Hill]","Chuck L. Robertson","Anderson D. Smith"],"categories":null,"content":"","date":1101859200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1101859200,"objectID":"50e433a91dedcaad69f93848c53ab186","permalink":"https://vuongvtrinh.github.io/publication/2004-false-memories/","publishdate":"2004-12-01T00:00:00Z","relpermalink":"/publication/2004-false-memories/","section":"publication","summary":"We examined the effect of item-specific and relational encoding instructions on false recognition in two experiments in which the DRM paradigm was used (Deese, 1959; Roediger \u0026 McDermott, 1995). Type of encoding (item-specific or relational) was manipulated between subjects in Experiment 1 and within subjects in Experiment 2. Decision-based explanations (e.g., the distinctiveness heuristic) predict reductions in false recognition in between-subjects designs, but not in within-subjects designs, because they are conceptualized as global shifts in decision criteria. Memory-based explanations predict reductions in false recognition in both designs, resulting from enhanced recollection of item-specific details. False recognition was reduced following item-specific encoding instructions in both experiments, favoring a memory-based explanation. These results suggest that providing unique cues for the retrieval of individual studied items results in enhanced discrimination between those studied items and critical lures. Conversely, enhancing the similarity of studied items results in poor discrimination among items within a particular list theme. These results are discussed in terms of the item-specific/relational framework (Hunt \u0026 McDaniel, 1993).","tags":null,"title":"Item-specific Processing Reduces False Memories","type":"publication"}]