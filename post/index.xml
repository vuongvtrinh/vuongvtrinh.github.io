<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Vuong V. Trinh</title>
    <link>https://vuongvtrinh.github.io/post/</link>
    <description>Recent content in Posts on Vuong V. Trinh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Vuong V. Trinh 2016</copyright>
    <lastBuildDate>Thu, 17 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vuongvtrinh.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flask-Base: A simple Flask boilerplate app with SQLAlchemy, Redis, User Authentication, and more</title>
      <link>https://vuongvtrinh.github.io/post/flask-base/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/post/flask-base/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data analytics dashboard using Python Flask and JavaScript Highcharts</title>
      <link>https://vuongvtrinh.github.io/post/data-analytics-dashboard/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/post/data-analytics-dashboard/</guid>
      <description>Organization pattern app.py static/ templates/ graph.html  app.py from flask import Flask, render_template, jsonify import pandas as pd from six.moves import urllib import json app = Flask(__name__) @app.route(&amp;quot;/data.json&amp;quot;) def data(): timeInterval = 120 data = pd.DataFrame() featureList = [&#39;market-price&#39;, &#39;trade-volume&#39;] for feature in featureList: url = &amp;quot;https://api.blockchain.info/charts/&amp;quot;+feature+&amp;quot;?timespan=&amp;quot;+str(timeInterval)+&amp;quot;days&amp;amp;format=json&amp;quot; data[feature] = pd.DataFrame(json.loads(urllib.request.urlopen(url).read().decode(&#39;utf-8&#39;))[&#39;values&#39;])[&#39;y&#39;] result = data.to_dict(orient=&#39;records&#39;) seq = [[item[&#39;market-price&#39;], item[&#39;trade-volume&#39;]] for item in result] return jsonify(seq) @app.route(&amp;quot;/graph&amp;quot;) def graph(): return render_template(&#39;graph.html&#39;) if __name__ == &#39;__main__&#39;: app.</description>
    </item>
    
    <item>
      <title>A Telegram chatbot for data-driven analytics of crypto-market: on-chain versus off-chain transactions</title>
      <link>https://vuongvtrinh.github.io/post/trading-analysis-bot/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/post/trading-analysis-bot/</guid>
      <description>A tutorial to develop a Telegram chatbot for data-driven analytics of cryptoassets from both utility and speculation perspectives.
Chatbot: https://t.me/trading_analysis_bot
Requirements python-telegram-bot python-binance numpy datetime matplotlib seaborn six pandas sqlalchemy psycopg2  Source code import os import telegram from telegram import ParseMode from telegram.ext import Updater, CommandHandler from binance.client import Client from binance_trading_bot import analysis, monitor, news, bitcoin, supply from sqlalchemy import create_engine from pandas.io import sql MANUAL_TEXT = &amp;quot;&amp;quot;&amp;quot;Data-driven analytics of crypto-market on Binance.</description>
    </item>
    
  </channel>
</rss>