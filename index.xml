<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vuong V. Trinh on Vuong V. Trinh</title>
    <link>https://vuongvtrinh.github.io/</link>
    <description>Recent content in Vuong V. Trinh on Vuong V. Trinh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Vuong V. Trinh 2016</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0200</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CC BY SA</title>
      <link>https://vuongvtrinh.github.io/license/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0200</pubDate>
      
      <guid>https://vuongvtrinh.github.io/license/</guid>
      <description>&lt;p&gt;My website&amp;rsquo;s content are released under a &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;i class=&#34;fab fa-creative-commons fa-2x&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fab fa-creative-commons-by fa-2x&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fab fa-creative-commons-sa fa-2x&#34;&gt;&lt;/i&gt;
&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data analytics dashboard using Python Flask and JavaScript Highcharts</title>
      <link>https://vuongvtrinh.github.io/post/data-analytics-dashboard/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/post/data-analytics-dashboard/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A tutorial to develop a web dashboard for data analytics using Python Flask and JavaScript Highcharts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub repository: &lt;a href=&#34;https://github.com/trinhvv/flask-highcharts&#34; target=&#34;_blank&#34;&gt;https://github.com/trinhvv/flask-highcharts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Live demo: &lt;a href=&#34;https://flask-highcharts.herokuapp.com&#34; target=&#34;_blank&#34;&gt;https://flask-highcharts.herokuapp.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fetch data from &lt;a href=&#34;https://www.blockchain.com/&#34; target=&#34;_blank&#34;&gt;https://www.blockchain.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data preprocessing in Flask then parse to Highcharts&lt;/li&gt;
&lt;li&gt;Deploy to Heroku&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;structure&#34;&gt;Structure&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;app.py
Procfile
requirements.txt
runtime.txt
static/
templates/
    index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;requirements-txt&#34;&gt;requirements.txt&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Flask
gunicorn
pandas
six
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;app-py&#34;&gt;app.py&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from flask import Flask, render_template, jsonify
import pandas as pd
from six.moves import urllib
import json
 
app = Flask(__name__)
 
@app.route(&amp;quot;/data.json&amp;quot;)
def data():
    timeInterval = 1000
    data = pd.DataFrame()
    featureList = [&#39;market-price&#39;, 
                   &#39;trade-volume&#39;]
    for feature in featureList:
        url = &amp;quot;https://api.blockchain.info/charts/&amp;quot;+feature+&amp;quot;?timespan=&amp;quot;+str(timeInterval)+&amp;quot;days&amp;amp;format=json&amp;quot;
        data[&#39;time&#39;] = pd.DataFrame(json.loads(urllib.request.urlopen(url).read().decode(&#39;utf-8&#39;))[&#39;values&#39;])[&#39;x&#39;]*1000
        data[feature] = pd.DataFrame(json.loads(urllib.request.urlopen(url).read().decode(&#39;utf-8&#39;))[&#39;values&#39;])[&#39;y&#39;]
    result = data.to_dict(orient=&#39;records&#39;)
    seq = [[item[&#39;time&#39;], item[&#39;market-price&#39;], item[&#39;trade-volume&#39;]] for item in result]
    return jsonify(seq)
 
@app.route(&amp;quot;/&amp;quot;)
def index():
    return render_template(&#39;index.html&#39;)
 
if __name__ == &#39;__main__&#39;:
    app.run(debug=True, threaded=True, host=&#39;0.0.0.0&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;templates-index-html&#34;&gt;templates/index.html&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD HTML 4.01//EN&amp;quot; &amp;quot;http://www.w3.org/TR/html4/strict.dtd&amp;quot;&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;
      Chart
    &amp;lt;/title&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.1.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://code.highcharts.com/stock/highstock.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://code.highcharts.com/stock/modules/exporting.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        $.getJSON(&#39;/data.json&#39;, function (data) {
            // create the chart
            Highcharts.stockChart(&#39;container&#39;, {
                title: {
                    text: &#39;Bitcoin&#39;
                },
                rangeSelector: {
                    selected: 1,
                    inputEnabled: false
                },
                series: [{
                    name: &#39;Bitcoin&#39;,
                    data: data,
                    tooltip: {
                        valueDecimals: 2
                    }
                }]
            });
        });
    &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;container&amp;quot; style=&amp;quot;height: 400px; min-width: 310px; max-width: 1000px&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;procfile&#34;&gt;Procfile&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;web: gunicorn app:app --log-file=-
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;runtime-txt&#34;&gt;runtime.txt&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;python-3.6.5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deploy-to-heroku&#34;&gt;Deploy to Heroku&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;heroku create flask-highcharts --buildpack heroku/python
heroku login
git init
heroku git:remote -a flask-highcharts
git add .
git commit -am &amp;quot;make it better&amp;quot;
git push heroku master
heroku ps:scale bot=1 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;screenshot&#34;&gt;Screenshot&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;screenshot.png&#34; alt=&#34;screenshot.png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Telegram chatbot for data-driven analytics of crypto-market: on-chain versus off-chain transactions</title>
      <link>https://vuongvtrinh.github.io/post/trading-analysis-bot/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/post/trading-analysis-bot/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A tutorial to develop a Telegram chatbot for data-driven analytics of cryptoassets from both utility and speculation perspectives.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Telegram chatbot: &lt;a href=&#34;https://t.me/trading_analysis_bot&#34; target=&#34;_blank&#34;&gt;https://t.me/trading_analysis_bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub repository: &lt;a href=&#34;https://github.com/trinhvv/trading-analysis-bot&#34; target=&#34;_blank&#34;&gt;https://github.com/trinhvv/trading-analysis-bot&lt;/a&gt; (&amp;gt;100 star)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;technology&#34;&gt;Technology&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Chatbot&lt;/li&gt;
&lt;li&gt;Financial time series data visualization and analysis&lt;/li&gt;
&lt;li&gt;Databases and access management&lt;/li&gt;
&lt;li&gt;Data wrangling&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;python-telegram-bot
python-binance
numpy
datetime
matplotlib
seaborn
six
pandas
sqlalchemy
psycopg2
beautifulsoup4
requests
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import os
import telegram
from telegram import ParseMode
from telegram.ext import Updater, CommandHandler
from binance.client import Client
from binance_trading_bot import analysis, monitor, news, supply
from sqlalchemy import create_engine
from pandas.io import sql

MANUAL_TEXT = &amp;quot;&amp;quot;&amp;quot;Data-driven analytics of crypto-market on Binance exchange.

*Asset information*
Syntax: /i &amp;lt;asset&amp;gt;
Usage: /i oax or /i algo bnb.
*Asset transaction analysis*
Syntax: /s &amp;lt;asset&amp;gt;
Usage: /s qtum or /s btt fet.
*Asset supply and demand analysis*
Syntax: /x &amp;lt;asset&amp;gt; &amp;lt;time-frame&amp;gt; &amp;lt;n-day&amp;gt;
Usage: /x fet celrusdt or /x dlt 4h 30. 
*Bitcoin aggregated charts*
Syntax: /b &amp;lt;n-day&amp;gt;
Usage: /b or /b 90.
*Market movement statistics*
Syntax: /m
Usage: /m.
*Market moneyflow analysis*
Syntax: /e &amp;lt;n-day&amp;gt;
Usage: /e or /e 90.
*Newsflow*
Syntax: /n
Usage: /n.

Contact: @kakalotz 
Website: [https://tapchitienmahoa.netlify.com](https://tapchitienmahoa.netlify.com)

_Disclammer: only accessible for registered users._
_Life-time subscription: 0.05BTC._
 &amp;quot;&amp;quot;&amp;quot;

TELEGRAM_TOKEN = os.environ[&#39;TELEGRAM_TOKEN&#39;]
BINANCE_SECRET_KEY = os.environ[&#39;BINANCE_SECRET_KEY&#39;]
BINANCE_API_KEY = os.environ[&#39;BINANCE_API_KEY&#39;]
SQLALCHEMY_DATABASE_URI = os.environ[&#39;SQLALCHEMY_DATABASE_URI&#39;]

TELEGRAM_ADMIN_USERNAME = os.environ[&#39;TELEGRAM_ADMIN_USERNAME&#39;]

engine = create_engine(SQLALCHEMY_DATABASE_URI)
conn = engine.raw_connection()
userList = sql.read_sql(&#39;SELECT * FROM &amp;quot;userList&amp;quot;&#39;, conn)
conn.close() 
userList = userList[userList[&#39;TRADING_ANALYSIS_BOT&#39;]==1][&#39;USERNAME&#39;].tolist()

client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

# Asset info
def i(bot, update, args):
    bot.send_chat_action(chat_id=update.message.chat_id, 
                         action=telegram.ChatAction.TYPING)
    if str(update.message.from_user.username) in userList:
        for asset in args:
            asset = asset.upper()
            msg = analysis.asset_info(client, asset)
            update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)

# Asset transaction statistics
def s(bot, update, args):
    bot.send_chat_action(chat_id=update.message.chat_id, 
                         action=telegram.ChatAction.TYPING)
    if str(update.message.from_user.username) in userList:
        for asset in args:
            asset = asset.upper()
            msg = analysis.asset_analysis(client, asset)
            update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)

# Asset supply analysis
def x(bot, update, args):
    bot.send_chat_action(chat_id=update.message.chat_id, 
                         action=telegram.ChatAction.TYPING)
    if str(update.message.from_user.username) in userList:
        if args[-1].isdigit():
            TIME_FRAME_STEP = &#39;1h&#39;
            TIME_FRAME = args[-2]
            TIME_FRAME_DURATION = str(args[-1])+&#39; days ago UTC&#39;
            coinList = args[:-2]
        else:
            TIME_FRAME_STEP = &#39;1h&#39;
            TIME_FRAME = &#39;1d&#39;
            TIME_FRAME_DURATION = &#39;45 days ago UTC&#39;
            coinList = args
        for coin in coinList:
            try:
                market = coin.upper()
                supply.supply_analysis(client, market, TIME_FRAME_STEP, TIME_FRAME, TIME_FRAME_DURATION)
                bot.send_photo(chat_id=update.message.chat_id, 
                           photo=open(&#39;img/&#39;+market+&#39;_&#39;+TIME_FRAME.upper()+&#39;.png&#39;, &#39;rb&#39;))
            except Exception:
                pass
            try:
                market = coin.upper()+&#39;BTC&#39;
                supply.supply_analysis(client, market, TIME_FRAME_STEP, TIME_FRAME, TIME_FRAME_DURATION)
                bot.send_photo(chat_id=update.message.chat_id, 
                           photo=open(&#39;img/&#39;+market+&#39;_&#39;+TIME_FRAME.upper()+&#39;.png&#39;, &#39;rb&#39;))
            except Exception:
                pass

# Bitcoin aggregated charts
def b(bot, update, args):
    bot.send_chat_action(chat_id=update.message.chat_id, 
                         action=telegram.ChatAction.TYPING)
    if str(update.message.from_user.username) in userList:
        try:
            timeInterval = int(args[0])
        except Exception:
            timeInterval = 120
        monitor.blockchain(timeInterval)
        bot.send_photo(chat_id=update.message.chat_id, 
                   photo=open(&#39;img/blockchain.png&#39;, &#39;rb&#39;))

# Market change
def m(bot, update):
    bot.send_chat_action(chat_id=update.message.chat_id, 
                         action=telegram.ChatAction.TYPING)
    if str(update.message.from_user.username) in userList:
        msg = monitor.market_change(client)
        update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)

# Market movement statistics
def e(bot, update, args):
    bot.send_chat_action(chat_id=update.message.chat_id, 
                         action=telegram.ChatAction.TYPING)
    if str(update.message.from_user.username) == TELEGRAM_ADMIN_USERNAME:
        try:
            timeInterval = int(args[0])
        except Exception:
            timeInterval = 120
        monitor.market_movement(client, timeInterval)
        bot.send_photo(chat_id=update.message.chat_id, 
                   photo=open(&#39;img/market.png&#39;, &#39;rb&#39;))

# Newsflow
def n(bot, update):
    bot.send_chat_action(chat_id=update.message.chat_id, 
                         action=telegram.ChatAction.TYPING)
    msg = news.newsflow()
    update.message.reply_text(msg, 
                              parse_mode=ParseMode.MARKDOWN,
                              disable_web_page_preview=True)

def manual(bot,update):
    bot.send_message(chat_id=update.message.chat_id, 
                     text=MANUAL_TEXT, 
                     parse_mode=ParseMode.MARKDOWN, 
                     disable_web_page_preview=True)

def main():
    updater=Updater(TELEGRAM_TOKEN)
    dp=updater.dispatcher
    dp.add_handler(CommandHandler(&amp;quot;start&amp;quot;, manual))
    dp.add_handler(CommandHandler(&amp;quot;help&amp;quot;, manual))
    dp.add_handler(CommandHandler(&amp;quot;m&amp;quot;, m))
    dp.add_handler(CommandHandler(&amp;quot;n&amp;quot;, n))
    dp.add_handler(CommandHandler(&amp;quot;i&amp;quot;, i, pass_args=True))
    dp.add_handler(CommandHandler(&amp;quot;b&amp;quot;, b, pass_args=True))
    dp.add_handler(CommandHandler(&amp;quot;e&amp;quot;, e, pass_args=True))
    dp.add_handler(CommandHandler(&amp;quot;x&amp;quot;, x, pass_args=True))
    dp.add_handler(CommandHandler(&amp;quot;s&amp;quot;, s, pass_args=True))
    updater.start_polling()
    updater.idle()

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deployment-on-heroku-platform&#34;&gt;Deployment on Heroku platform&lt;/h2&gt;

&lt;h3 id=&#34;initialize&#34;&gt;Initialize&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;heroku create trading-analysis-bot --buildpack heroku/python
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setup-postgres-database-for-user-management&#34;&gt;Setup Postgres database for user management&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import pandas as pd
from sqlalchemy import create_engine
import json

with open(&#39;setting.txt&#39;) as json_file:  
    setting = json.load(json_file)

engine = create_engine(setting[&#39;SQLALCHEMY_DATABASE_URI&#39;])
conn = engine.raw_connection()
customer = pd.read_csv(&amp;quot;customer.csv&amp;quot;)
customer.to_sql(name=&#39;userList&#39;, con=engine, if_exists=&#39;replace&#39;)
conn.close() 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deploy-to-the-cloud&#34;&gt;Deploy to the cloud&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;heroku config:set TELEGRAM_TOKEN=XXXXXXXXXXXXXXXXXXXXXXXXXX
heroku config:set BINANCE_SECRET_KEY=XXXXXXXXXXXXXXXXXXXXXXXXXX
heroku config:set BINANCE_API_KEY=XXXXXXXXXXXXXXXXXXXXXXXXXX
heroku config:set SQLALCHEMY_DATABASE_URI=XXXXXXXXXXXXXXXXXXXXXXXXXX
git push heroku master
heroku ps:scale bot=1 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;snapshots&#34;&gt;Snapshots&lt;/h2&gt;



&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-1.jpg&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-1.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-2.jpg&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-2.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-3.jpg&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-3.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-4.jpg&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-4.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-5.jpg&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-5.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-6.jpg&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-6.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-7.jpg&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/post/trading-analysis-bot/gallery/snapshot-7.jpg&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Innovative Advanced Control of Large Cryogenic Systems</title>
      <link>https://vuongvtrinh.github.io/project/cryogenic-refrigerator/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/project/cryogenic-refrigerator/</guid>
      <description>

&lt;p&gt;The ANR CRYOGREEN project gathers collaborative academic and industrial partners, including GIPSA-lab, CEA and CERN. We target to advanced control of large cryogenic systems via explicit nonlinear and hierarchical distributed model predictive control frameworks.&lt;/p&gt;



&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/project/cryogenic-refrigerator/gallery/cea.png&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/project/cryogenic-refrigerator/gallery/cea.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/project/cryogenic-refrigerator/gallery/cern.png&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/project/cryogenic-refrigerator/gallery/cern.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;

&lt;h2 id=&#34;explicit-constrained-control-of-warm-compression-stations&#34;&gt;Explicit Constrained Control of Warm Compression Stations&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;cern_wcs18kw.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;cern_wcs18kw.png&#34; alt=&#34;Warm compression station at CERN&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;process-configuration-and-dynamic-simulator&#34;&gt;Process configuration and dynamic simulator&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;wcs-config.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;wcs-config.png&#34; alt=&#34;Warm compression station configuration&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;wcs-simulator.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;wcs-simulator.png&#34; alt=&#34;Warm compression station&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;allocation-control-and-validation-results&#34;&gt;Allocation control and validation results&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;wcs-allocation.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;wcs-allocation.png&#34; alt=&#34;Allocation control&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;wcs-valid.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;wcs-valid.png&#34; alt=&#34;Validation result&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hierarchical-constrained-control-of-cryogenic-refrigerators&#34;&gt;Hierarchical Constrained Control of Cryogenic Refrigerators&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;400W.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;400W.png&#34; alt=&#34;Cryogenic refrigerator at CEA&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;process-diagram-and-dynamic-simulator&#34;&gt;Process diagram and dynamic simulator&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;process-diagram.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;process-diagram.png&#34; alt=&#34;Process diagram&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;br-simulator.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;br-simulator.png&#34; alt=&#34;Brayton cycle&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;jt-simulator.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;jt-simulator.png&#34; alt=&#34;Joule-Thompson cycle&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hierarchical-control-algorithm-and-numerical-results&#34;&gt;Hierarchical control algorithm and numerical results&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;hdmpc-algo.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;hdmpc-algo.png&#34; alt=&#34;Hierarchical control algorithm&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;aa-convergence.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;aa-convergence.png&#34; alt=&#34;Convergence result&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;fast-nonlinear-constrained-control-of-a-stirling-engine&#34;&gt;Fast nonlinear constrained control of a Stirling engine&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;microsol.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;microsol.png&#34; alt=&#34;Miscrosol&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;process-diagram&#34;&gt;Process diagram&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;stirling_diagram.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;stirling_diagram.png&#34; alt=&#34;Process diagram&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;fast-explicit-constrained-control-synthesis&#34;&gt;Fast explicit constrained control synthesis&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;empc_nonlin.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;empc_nonlin.png&#34; alt=&#34;Nonlinear analysis&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;real-time-validation&#34;&gt;Real-time validation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;empc_valid.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;empc_valid.png&#34; alt=&#34;Validation and real-time analysis&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quantitative Analytics and Trading Strategies</title>
      <link>https://vuongvtrinh.github.io/project/quantitative-finance/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/project/quantitative-finance/</guid>
      <description>

&lt;p&gt;This project develops an intelligent data driven application to monitor blockchain projects and to analyze cryptoassets from both utility and speculation perspectives. We target blockchain entrepreneurs, investors and traders all along the life of projects: token generation, listing on secondary market, product delivery, product usage, and token valorization.&lt;/p&gt;

&lt;h2 id=&#34;data-driven-financial-analytics&#34;&gt;Data-Driven Financial Analytics&lt;/h2&gt;

&lt;h3 id=&#34;fundamental-information&#34;&gt;Fundamental information&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#EVX
Type: TOKEN
Website: https://www.everex.io/
Social Media: 
- https://t.me/everexio
- https://www.facebook.com/everex.io
- https://twitter.com/everexio
Explorers: 
- https://etherscan.io/token/0xf3db5fa2c66b7af3eb0c0b782510816cbe4813b8
Source Code: https://github.com/EverexIO/Et
Market Cap: $12,407,222
Current Price: $0.548992
Issue Price: $0.880000
Issue Date: 2017-10-11
Max Supply: -
Total Supply: 25,000,000
Circulating Supply: 22,600,000
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;transaction-analysis&#34;&gt;Transaction analysis&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#TNTBTC 92,966,054.00 (94.84%)
P: 0.00000730 V: 608.23 VWAP: 0.00000654
30 mins: Buy 12.07 Sell 6.42
15 mins: Buy 8.37 Sell 3.97
5 mins: Buy 4.19 Sell 2.16
#TNTETH 5,059,783.00 (5.16%)
P: 0.00026182 V: 1,194.92 VWAP: 0.00023616
30 mins: Buy 13.32 Sell 12.58
15 mins: Buy 8.04 Sell 2.38
5 mins: Buy 1.76 Sell 1.99
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;supply-and-demand-analysis&#34;&gt;Supply and demand analysis&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;x.png&#34; alt=&#34;x.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;market-movement-statistics&#34;&gt;Market movement statistics&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#MARKET
USDⓈ: 20 (+) 113 (-)
ALTS: 43 (+) 89 (-)
BNB: 63 (+) 30 (-)
BTC: 120 (+) 31 (-)
Tue Jul  2 13:48:21 2019
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;market-moneyflow-analysis&#34;&gt;Market moneyflow analysis&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;binance.png&#34; alt=&#34;binance.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;bitcoin-aggregated-charts&#34;&gt;Bitcoin aggregated charts&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;blockchain.png&#34; alt=&#34;blockchain.png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;newsflow-sentiment-analysis&#34;&gt;Newsflow sentiment analysis&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;n.png&#34; alt=&#34;n.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;basic-trading-strategies&#34;&gt;Basic Trading Strategies&lt;/h2&gt;

&lt;h3 id=&#34;ping-pong-order&#34;&gt;Ping/Pong Order&lt;/h3&gt;

&lt;p&gt;Ping/pong submits multiple &amp;lsquo;ping&amp;rsquo; orders; once a ping order fills, an associated &amp;lsquo;pong&amp;rsquo; order is submitted.&lt;/p&gt;

&lt;p&gt;Multiple ping/pong pairs can be created by specifying an order count greater than 1, a suitable min/max ping price, and a pong distance. Multiple ping orders will be created between the specified min/max prices, with the associated pongs offset by the pong distance from the ping price.&lt;/p&gt;

&lt;h3 id=&#34;iceberg-order&#34;&gt;Iceberg Order&lt;/h3&gt;

&lt;p&gt;Iceberg allows you to place a large order on the market while ensuring only a small part of it is ever filled at once.&lt;/p&gt;

&lt;h3 id=&#34;twap-order&#34;&gt;TWAP Order&lt;/h3&gt;

&lt;p&gt;TWAP spreads an order out through time in order to fill at the time-weighted average price, calculated between the time the order is submitted to the final atomic order close.&lt;/p&gt;

&lt;p&gt;The price can be specified as a fixed external target, such as the top bid/ask or last trade price, or as an explicit target which must be matched against the top bid/ask/last trade/etc.&lt;/p&gt;

&lt;h3 id=&#34;accumulate-distribute-order&#34;&gt;Accumulate/Distribute Order&lt;/h3&gt;

&lt;p&gt;Accumulate/Distribute allows you to break up a large order into smaller randomized chunks, submitted at regular or irregular intervals to minimise detection by other players in the market.&lt;/p&gt;

&lt;h2 id=&#34;advanced-trading-strategies&#34;&gt;Advanced Trading Strategies&lt;/h2&gt;

&lt;h3 id=&#34;statistical-arbitrage-via-pairs-trading&#34;&gt;Statistical arbitrage via pairs trading&lt;/h3&gt;

&lt;h3 id=&#34;trailing-stop-and-short-sell-via-iceberge-order&#34;&gt;Trailing stop and short sell via iceberge order&lt;/h3&gt;

&lt;h3 id=&#34;pure-market-maker&#34;&gt;Pure market maker&lt;/h3&gt;

&lt;h3 id=&#34;portfolio-management-and-optimization&#34;&gt;Portfolio management and optimization&lt;/h3&gt;

&lt;h2 id=&#34;screenshots&#34;&gt;Screenshots&lt;/h2&gt;



&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/project/quantitative-finance/gallery/blog.png&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/project/quantitative-finance/gallery/blog.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/project/quantitative-finance/gallery/t.png&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/project/quantitative-finance/gallery/t.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-gallery&#34; href=&#34;https://vuongvtrinh.github.io/project/quantitative-finance/gallery/user.png&#34; &gt;
  &lt;img src=&#34;https://vuongvtrinh.github.io/project/quantitative-finance/gallery/user.png&#34; alt=&#34;&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Real-time Anomaly Detection for Industrial Big Data</title>
      <link>https://vuongvtrinh.github.io/project/anomaly-detection/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/project/anomaly-detection/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fixed-point based hierarchical MPC control design for a cryogenic refrigerator</title>
      <link>https://vuongvtrinh.github.io/publication/2017-hdmpc-jpc/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/publication/2017-hdmpc-jpc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On the stabilization of fixed-point iterations arising in hierarchical control design</title>
      <link>https://vuongvtrinh.github.io/publication/2017-hdmpc-ifacwc/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/publication/2017-hdmpc-ifacwc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Anomaly detection in wireless sensor networks via support vector data description with Mahalanobis kernels and discriminative adjustment</title>
      <link>https://vuongvtrinh.github.io/publication/2017-wsn-nics/</link>
      <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/publication/2017-wsn-nics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Explicit model predictive control via nonlinear piecewise approximations</title>
      <link>https://vuongvtrinh.github.io/publication/2016-enmpc-nolcos/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/publication/2016-enmpc-nolcos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data driven hyperparameter optimization of one-class support vector machines for anomaly detection in wireless sensor networks</title>
      <link>https://vuongvtrinh.github.io/publication/2017-wsn-atc/</link>
      <pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/publication/2017-wsn-atc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Trading Analysis Bot</title>
      <link>https://vuongvtrinh.github.io/project/trading-analysis-bot/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/project/trading-analysis-bot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Robust Active Vibration Control</title>
      <link>https://vuongvtrinh.github.io/project/active-vibration-control/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/project/active-vibration-control/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tap Chi Tien Ma Hoa</title>
      <link>https://vuongvtrinh.github.io/project/tapchitienmahoa/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://vuongvtrinh.github.io/project/tapchitienmahoa/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
